= DebugTrace-java

link:README_ja.asciidoc[[Japanese]]

*DebugTrace-java* is a library that outputs trace logs when debugging Java programs. It is available on Java 8 or later. +
By embedding `DebugTrace.enter()` and `DebugTrace.leave()` at the start and end of methods, you can output the execution status of the Java program under development to the log.

==== 1. Features

* Automatically outputs invoker's class name, method name, source file and line number.
* Automatically indents the log with nesting methods and objects.
* Automatically output logs when changing threads.
* Uses reflection to output the contents of classes that do not implement the `toString` method.
* You can customize the output content in `DebugTrace.properties`.
* There are no dependent libraries at run time. (Required if you use the following logging library)
* You can use the following logging library.
** Console (stdout and stderr)
** https://docs.oracle.com/javase/8/docs/api/java/util/logging/Logger.html[JDK Logger]
** http://logging.apache.org/log4j/1.2/[Log4j]
** https://logging.apache.org/log4j/2.x/[Log4j2]
** http://www.slf4j.org/[SLF4J]
** Direct file output [.small]#(since 3.4.0)#

==== 2. How to use

Insert the following for the debuggee and related methods.

* `DebugTrace.enter();`
* `DebugTrace.leave();`
* `DebugTrace.print("value", value);`

===== (1) If the method does not throw an exception and does not return in the middle.

----
public void foo() {
    DebugTrace.enter(); // TODO: Remove after debugging
    ...
    DebugTrace.print("value", value); // TODO: Remove after debugging
    ...
    DebugTrace.leave(); // TODO: Remove after debugging
}
----

===== (2) If the method does not throw an exception, but there are returns in the middle.

----
public void foo() {
    try {DebugTrace.enter(); // TODO: Remove after debugging
    ...
    DebugTrace.print("value", value); // TODO: Remove after debugging
    ...
    if (...)
        return;
    ...
    } finally {DebugTrace.leave();} // TODO: Remove after debugging
}
----

===== (3) If the method throws an exception.

----
public void foo() throws Exception {
    try {DebugTrace.enter(); // TODO: Remove after debugging
    ...
    DebugTrace.print("value", value); // TODO: Remove after debugging
    ...
    if (...)
        throw new Exception();
    ...
    } catch (Exception e) {DebugTrace.print("e", e); throw e; // TODO: Remove after debugging
    } finally {DebugTrace.leave();} // TODO: Remove after debugging
}
----

The following is an example of Java source used DebugTrace-java methods and the log of when it has been executed.

[source,java]
.Example1.java
----
package example;

import java.util.HashMap;
import java.util.Map;

import org.debugtrace.DebugTrace;

public class Example1 {
    private static final Map<Long, Long> fibonacciMap = new HashMap<>();
    static {
        fibonacciMap.put(0L, 0L);
        fibonacciMap.put(1L, 1L);
    }

    public static void main(String[] args) {
        DebugTrace.enter(); // TODO: Remove after debugging
        try {
            if (args.length <= 0)
                throw new IllegalArgumentException("args.length = " + args.length);
            long n = Long.parseLong(args[0]);
            long fibonacci = fibonacci(n);
            System.out.println("fibonacci(" + n + ") = " + fibonacci);
        } catch (Exception e) {
            DebugTrace.print("e", e); // TODO: Remove after debugging
        }
        DebugTrace.leave(); // TODO: Remove after debugging
    }

    public static long fibonacci(long n) {
        DebugTrace.enter(); // TODO: Remove after debugging
        if (n < 0)
            throw new IllegalArgumentException("n (" + n + ") is negative.");
        long fibonacci = 0;
        if (fibonacciMap.containsKey(n)) {
            fibonacci = fibonacciMap.get(n);
            DebugTrace.print("mapped fibonacci(" + n + ")", fibonacci); // TODO: Remove after debugging
        } else {
            fibonacci = fibonacci(n - 2) + fibonacci(n - 1);
            DebugTrace.print("fibonacci(" + n + ")", fibonacci); // TODO: Remove after debugging
            if (fibonacci < 0)
                throw new RuntimeException("Overflow occurred in fibonacci(" + n + ") calculation.");
            fibonacciMap.put(n, fibonacci);
        }
        DebugTrace.leave(); // TODO: Remove after debugging
        return fibonacci;
    }
}
----

.debugtrace.log
----
2022-09-17 15:16:32.347+09:00 DebugTrace 3.5.1 on Temurin OpenJDK Runtime Environment 1.8.0_332-b09
2022-09-17 15:16:32.349+09:00   property name: DebugTrace.properties
2022-09-17 15:16:32.349+09:00   logger: org.debugtrace.logger.Std$Err
2022-09-17 15:16:32.356+09:00 
2022-09-17 15:16:32.357+09:00 ______________________________ main ______________________________
2022-09-17 15:16:32.357+09:00 
2022-09-17 15:16:32.358+09:00 Enter example.Example1.main (Example1.java:18)
2022-09-17 15:16:32.358+09:00 | Enter example.Example1.fibonacci (Example1.java:32)
2022-09-17 15:16:32.358+09:00 | | Enter example.Example1.fibonacci (Example1.java:32)
2022-09-17 15:16:32.376+09:00 | | | mapped fibonacci(1) = (long)1 (Example1.java:38)
2022-09-17 15:16:32.377+09:00 | | Leave example.Example1.fibonacci (Example1.java:46) duration: 00:00:00.017
2022-09-17 15:16:32.377+09:00 | | 
2022-09-17 15:16:32.377+09:00 | | Enter example.Example1.fibonacci (Example1.java:32)
2022-09-17 15:16:32.377+09:00 | | | Enter example.Example1.fibonacci (Example1.java:32)
2022-09-17 15:16:32.377+09:00 | | | | mapped fibonacci(0) = (long)0 (Example1.java:38)
2022-09-17 15:16:32.378+09:00 | | | Leave example.Example1.fibonacci (Example1.java:46) duration: 00:00:00.000
2022-09-17 15:16:32.378+09:00 | | | 
2022-09-17 15:16:32.378+09:00 | | | Enter example.Example1.fibonacci (Example1.java:32)
2022-09-17 15:16:32.378+09:00 | | | | mapped fibonacci(1) = (long)1 (Example1.java:38)
2022-09-17 15:16:32.379+09:00 | | | Leave example.Example1.fibonacci (Example1.java:46) duration: 00:00:00.000
2022-09-17 15:16:32.379+09:00 | | | fibonacci(2) = (long)1 (Example1.java:41)
2022-09-17 15:16:32.379+09:00 | | Leave example.Example1.fibonacci (Example1.java:46) duration: 00:00:00.001
2022-09-17 15:16:32.379+09:00 | | fibonacci(3) = (long)2 (Example1.java:41)
2022-09-17 15:16:32.379+09:00 | Leave example.Example1.fibonacci (Example1.java:46) duration: 00:00:00.021
fibonacci(3) = 2
2022-09-17 15:16:32.379+09:00 Leave example.Example1.main (Example1.java:28) duration: 00:00:00.021
----

==== 3. Method List

This library has the following methods. These are all static methods of org.debugtrace.DebugTrace class with no return value.

[options="header"]
.Method List
|===
|Method Name|Arguments|Return Value|Description

|`enter`
|_None_
|_None_
|Outputs method start to log.

|`leave`
|_None_
|_None_
|Outputs method end to log.

|`print`
|`message`: a message
|the `message` [.small]#(since 3.3.1)#
|Outputs the message to log.

|`print`
|`messageSupplier`: a supplier of message
| tht message getted from the messageSupplier [.small]#(since 3.3.1)#
|Gets a message from the supplier and output it to log.

|`print`
|`name`: the value name +
`value`: the value
|the `value` [.small]#(since 3.3.1)#
|Outputs to the log in the form of +
`"Name = Value"` +
The type of value is `boolean`, `char`, `byte`, `short`, `int`, `long`, `float`, `double` or `Object`.

|`print`
|`name`: the value name +
`valueSupplier`: the supplier of the value
| tht value getted from the valueSupplier [.small]#(since 3.3.1)#
|Gets a value from the supplier and outputs to the log in the form of +
`<value name> = <value>` +
The valueSupplier type is `BooleanSupplier`, `IntSupplier`, `LongSupplier` or `Supplier<T>`.

|`print` +
[.small]#(deprecated since 3.3.0)#
|`mapName`: the name of map to get constant name corresponding to number +
`name`: the value name +
`value`: the value
|the `value` [.small]#(since 3.3.1)#
|Outputs to the log in the form of +
`<value name> = <value>(<constant name>)`. +
The type of value is `byte`, `short`, `int`, `long` or `Object`.

|`print` +
[.small]#(deprecated since 3.3.0)#
|`mapName`: the name of map to get constant name corresponding to number +
`name`: the value name +
`valueSupplier`: the supplier of the value
| tht value getted from the valueSupplier [.small]#(since 3.3.1)#
|Gets a value from the supplier and outputs to the log in the form of +
`<value name> = <value>(<constant name>)` +
The valueSupplier type is `BooleanSupplier`, `IntSupplier`, `LongSupplier` or `Supplier<T>`.

|`printStack` +
[.small]#(since 3.0.2)#
|`maxCount`:  maximum number of stack trace elements to output
|_None_
|Outputs a list of StackTraceElements to the log.

|===

==== 4. Properties of *DebugTrace.properties* file

DebugTrace read `DebugTrace.properties` file in the classpath on startup.  
You can specify following properties in the `DebugTrace.properties` file.  

[options="header", cols="2,3,4"]
.Property List
|===
|Property Name|Description|Default Value (Value Examples)

|`logger`
| Logger used by DebugTrace +
 +
[.small]#*Specifiable Values:*# +
`Std$Out` [.small]#- Outputs to stdout# +
`Std$Err` [.small]#- Outputs to stderr# +
`Jdk` [.small]#- Outputs using the JDK logger# +
`Log4j` [.small]#- Outputs using the Log4j 1 logger# +
`Log4j2` [.small]#- Outputs using the Log4j 2 logger# +
`SLF4J` [.small]#- Outputs using the SLF4J logger# +
`File: [.small]#<log file path>`# [.small]#- Outputs directly to the file (appending) (since 3.4.0 to 3.5.0)# +
[.small]#- Outputs directly to the file (from the top) (since 3.5.1)# +
`File: [.small]#+<log file path>`# [.small]#- Outputs directly to the file (appending) (since 3.5.1)#
|`Std$Err`

|`logLevel`
|Log level to use when outputting +
 +
[.small]#*Specifiable Values (logger = JDK):*# +
`default` [.small]#- Same as finest# +
`finest` +
`finer` +
`fine` +
`config` +
`info` +
`warning` +
`severe` +
 +
[.small]#*Specifiable Values (logger = Log4j and logger = Lo4j2):*# +
`default` [.small]#- Same as trace# +
`trace` +
`debug` +
`info` +
`warn` +
`error` +
`fatal` +
 +
[.small]#*Specifiable Values (logger = SLF4J):*# +
`default` [.small]#- Same as trace# +
`trace` +
`debug` +
`info` +
`warn` +
`error`
|`default`

|`enterFormat` +
[.small]#(Renamed (since 3.0.0))# +
 +
`enterString` +
[.small]#(Deprecated (since 3.0.0))#
|The format string of logging when entering methods +
 +
[.small]#*Parameters:*# +
`%1`: The class name +
`%2`: The method name +
`%3`: The file name +
`%4`: The line number
|`Enter %1$s.%2$s (%3$s:%4$d)` +

|`leaveFormat` +
[.small]#(Renamed (since 3.0.0))# +
 +
`leaveString` +
[.small]#(Deprecated (since 3.0.0))#
|The format string of logging when leaving methods +
 +
[.small]#*Parameters:*# +
`%1`: The class name +
`%2`: The method name +
`%3`: The file name +
`%4`: The line number +
`%5`: The duration since invoking the corresponding `enter` method
|`Leave %1$s.%2$s (%3$s:%4$d) duration: %5$tT.%5$tL` +

|`threadBoundaryFormat` +
[.small]#(Renamed since 3.0.0)# +
 +
`threadBoundaryString` +
[.small]#(Deprecated (since 3.0.0))#
|The format string of logging at threads boundary +
 +
[.small]#*Parameter:*# +
`%1`: The thread name
|[.small]#`\____\__\__\__\__\__\__\__\__\__\__\__\__\__ %1$s \__\__\__\__\__\__\__\__\__\__\__\__\__\____`#

|`classBoundaryFormat` +
[.small]#(Renamed since 3.0.0)# +
 +
`classBoundaryString` +
[.small]#(Deprecated since 3.0.0)#
|The format string of logging at classes boundary +
 +
[.small]#*Parameter:*# +
`%1`: The class name
|`\\____ %1$s \____` +

|`indentString`
|The indentation string for code +
|`&#x7c;`\s` +
 +
`\\s` _is change to a space character_

|`dataIndentString`
|The indentation string for data +
|`\\s\\s` +
 +
`\\s` _is change to a space character_

|`limitString`
|The string to represent that it has exceeded the limit +
|`\...`

|`nonOutputString` +
[.small]#(Renamed since 3.0.0)# +
 +
`nonPrintString` +
[.small]#(Deprecated since 3.0.0)#
|The string to be output instead of not outputting value +
|`\***`

|`cyclicReferenceString`
|The string to represent that the cyclic reference occurs +
|`\\s\*\** cyclic reference \***\\s` +
 +
`\\s` _is change to a space character_

|`varNameValueSeparator`
|The separator string between the variable name and value +
|`\\s=\\s` +
 +
`\\s` _is change to a space character_

|`keyValueSeparator` +
 +
[.small]#`fieldNameValueSeparator`# +
[.small]#(Deleted since 3.0.0)#
|The separator string between the key and value of Map object +
|`:\\s` +
 +
`\\s` _is change to a space character_

|`printSuffixFormat`
|The format string of `print` method suffix +
[.small]#*Example:*# +
 +
[.small]#*Parameters:*# +
`%1`: The class name +
`%2`: The method name +
`%3`: The file name +
`%4`: The line number
|`\\s(%3$s:%4$d)` +
 +
`\\s` _is change to a space character_ +

|`sizeFormat` +
[.small]#(since 3.0.0)#
|The format string of the size of collection and map +
 +
[.small]#*Parameters:*# +
`%1`: The size
|`\\s(%3$s:%4$d)` +
 +
`\\s` _is change to a space character_ +

|`minimumOutputSize` +
[.small]#(since 3.0.0)#
|The minimum value to output the number of elements of array, collection and map
|5

|`lengthFormat` +
[.small]#(since 3.0.0)#
|The format string of the length of string +
 +
[.small]#*Parameters:*# +
`%1`: The string length
|`length:%1d` +

|`minimumOutputLength` +
[.small]#(since 3.0.0)#
|The minimum value to output the length of string
|5

|`utilDateFormat`
|The format string of `java.util.Date`
|`yyyy-MM-dd HH:mm:ss.SSSxxx`

|`sqlDateFormat`
|The format string of `java.sql.Date`
|`yyyy-MM-ddxxx`

|`timeFormat`
|The format string of `java.sql.Time`
|`HH:mm:ss.SSSxxx`

|`timestampFormat`
|The format string of `java.sql.Timestamp`
|`yyyy-MM-dd HH:mm:ss.SSSSSSSSSxxx`

|`localDateFormat`
|The format string of `java.time.LocalDate`
|`yyyy-MM-dd`

|`localTimeFormat`
|The format string of `java.time.LocalTime`
|`HH:mm:ss.SSSSSSSSS`

|`offsetTimeFormat`
|The format string of `java.time.OffsetTime`
|`HH:mm:ss.SSSSSSSSSxxx`

|`localDateTimeFormat`
|The format string of `java.time.LocalDateTime`
|`yyyy-MM-dd HH:mm:ss.SSSSSSSSS`

|`offsetDateTimeFormat`
|The format string of `java.time.OffsetDateTime`
|`yyyy-MM-dd HH:mm:ss.SSSSSSSSSxxx`

|`zonedDateTimeFormat`
|The format string of `java.time.ZonedDateTime`
|`yyyy-MM-dd HH:mm:ss.SSSSSSSSSxxx VV`

|`instantFormat`
|The format string of `java.time.Instant`
|`yyyy-MM-dd HH:mm:ss.SSSSSSSSSX`

|`logDateTimeFormat`
|The format string of the date and time of the log when the logger is `Std$Out` or `Std$Err`
|`yyyy-MM-dd HH:mm:ss.SSSxxx`

|`maximumDataOutputWidth` +
[.small]#(since 3.0.0)#
|The maximum output width of data
|70

|`collectionLimit` +
[.small]#(Renamed (since 3.0.0))# +
 +
[.small]#`arrayLimit`# +
[.small]#(Deprecated (since 3.0.0))# +
[.small]#`mapLimit`# +
[.small]#(Removed since 3.0.0)#
|The limit value of elements for collection and map to output
|128&#xa0; [.small]#(since 3.5.0)# +
512&#xa0; [.small]#(up to 3.4.0)#

|`byteArrayLimit`
|The limit value of elements for byte array (`byte[]`) to output +
|256 &#xa0; [.small]#(since 3.5.0)# +
8192 &#xa0; [.small]#(up to 3.4.0)#

|`stringLimit`
|The limit value of characters for string to output
|256 &#xa0; [.small]#(since 3.5.0)# +
8192 &#xa0; [.small]#(up to 3.4.0)#

|`reflectionNestLimit` +
[.small]#(since 3.0.0)#
|The The limit value for reflection nesting
|4

|`nonOutputProperties` +
[.small]#(Renamed (since 3.0.0))# +
 +
[.small]#`nonPrintProperties`# +
[.small]#(Deprecated (since 3.0.0))#
|Properties not to be output +
 +
[.small]#*Format of a value:*# +
`<Full class name>#<Property name>`
|_Nome_ +
 +
[.small]#*Example (1 value):*# +
[.small]#`org.lightsleep.helper.EntityInfo#columnInfos`# +
 +
[.small]#*Example (multi values):*# +
[.small]#`org.lightsleep.helper.EntityInfo#columnInfos,\`# +
[.small]#`org.lightsleep.helper.EntityInfo#keyColumnInfos,\`# +
[.small]#`org.lightsleep.helper.ColumnInfo#entityInfo`# +

|`defaultPackage`
|The default package of your java source
|_Nome_ +
 +
[.small]#*Example:*# +
`org.debugtrace.DebugTraceExample` +

|`defaultPackageString`
|The string replacing the default package part +
|`\...` +

|`reflectionClasses` +
|Classe names that output content by reflection even if `toString` method is implemented
|_Nome_ +
 +
[.small]#*Example (1 value):*# +
`org.debugtrce.example.Point` +
 +
[.small]#*Example (multi values):*# +
`org.debugtrace.example.Point,\` +
`org.debugtrace.example.Rectangle` +
 +
[.small]#*Example (package - since 3.5.0):*# +
`org.debugtrce.example.`

|`mapNameMap` +
|The map for obtaining map name corresponding to variable name +
 +
[.small]#*Format of a value:*# +
`<Variable Name>: <Map Name>`
|_Nome_ +
 +
[.small]#*Example:*# +
`appleBrand: AppleBrand`

|`<Constant Map Name>`
|The map of numbers (as key) and constant names (as value) corresponding to the numbers +
 +
[.small]#*Format of a value:*# +
`<Number>: <Constant Name>`
|[.small]#*Predefined constant name maps:*# +
`Calendar`: `Calendar.ERA` etc. +
`CalendarWeek`: `Calendar.SUNDAY` etc. +
`CalendarMonth`: `Calendar.JANUARY` etc. +
`CalendarAmPm`: `Calendar.AM` etc. +
`SqlTypes`: `java.sql.Types.BIT` etc. +
 +
[.small]#*Example:*# +
`AppleBrand = \` +
&#xa0;&#xa0; `0: Apple.NO_BRAND,\` + 
&#xa0;&#xa0; `1: Apple.AKANE,\` + 
&#xa0;&#xa0; `2: Apple.AKIYO,\` + 
&#xa0;&#xa0; `3: Apple.AZUSA,\` + 
&#xa0;&#xa0; `4: Apple.YUKARI` + 

|===

Specify the format string of the date and time in the form of the argument of `String.format` for DebugTrace-java *2.4.6* or earlier, and specify it in the form of the argument `DateTimeFormatter.ofPattern` for DebugTrace-java *2.5.0* or later.

===== 4.1. *nonOutputProperties*, *nonOutputString*

DebugTrace use reflection to output object contents if the `toString` method is not implemented.
If there are other object references, the contents of objects are also output.
However, if there is circular reference, it will automatically detect and suspend output.
You can suppress output by specifying the `nonOutputProperties` property and
can specify multiple values of this property separated by commas.  
The value of the property specified by `nonOutputProperties` are output as the string specified by `nonOutputString` (default: `\***`).

.Example of nonOutputProperties in DebugTrace.properties
----
nonOutputProperties = \
    org.lightsleep.helper.EntityInfo#columnInfos,\
    org.lightsleep.helper.EntityInfo#keyColumnInfos,\
    org.lightsleep.helper.ColumnInfo#entityInfo
----

===== 4.2. Constant map and *mapNameMap*

The constant map is a map whose key is numeric and whose value is a constant name.
When you call the `print` method with the key (map name) of this property as an argument, the constant name is output with numerical value.

.Example of constant map in DebugTrace.properties
----
AppleBrand = \
    0: Apple.NO_BRAND,\
    1: Apple.AKANE,\
    2: Apple.AKIYO,\
    3: Apple.AZUSA,\
    4: Apple.YUKARI
----

[source,java]
.Example of Java source
----
int appleBrand = Apple.AKANE;
DebugTrace.print("AppleBrand", "appleBrand", appleBrand);
----

.Example of the log
----
2017-07-29 13:45:32.489 | appleBrand = 1(Apple.AKANE) (README_example.java:29)
----

If you specify the map name corresponding to the variable name with the `mapNameMap` property, even if you do not specify the map name, the constant name is output.

.Example of *mapNameMap* in DebugTrace.properties
----
mapNameMap = appleBrand: AppleBrand
----

[source,java]
.Example of Java source
----
int appleBrand = Apple.AKANE;
DebugTrace.print("appleBrand", appleBrand);
appleBrand = Apple.AKIYO;
DebugTrace.print(" 2 appleBrand ", appleBrand);
appleBrand = Apple.AZUSA;
DebugTrace.print(" 3 example.appleBrand ", appleBrand);
appleBrand = Apple.YUKARI;
DebugTrace.print(" 4 example. appleBrand ", appleBrand);
----

.Example of the log
----
2017-07-29 13:45:32.489 | appleBrand = 1(Apple.AKANE) (README_example.java:38)
2017-07-29 13:45:32.489 |  2 appleBrand  = 2(Apple.AKIYO) (README_example.java:40)
2017-07-29 13:45:32.489 |  3 example.appleBrand  = 3(Apple.AZUSA) (README_example.java:42)
2017-07-29 13:45:32.489 |  4 example. appleBrand  = 4(Apple.YUKARI) (README_example.java:44)
----

==== 5. Examples of using logging libraries

The logger name of DebugTrace is `org.debugtrace.DebugTrace`.   

===== 5.1. Example of *logging.properties* (*JDK*)

.logging.properties
----
# logging.properties
handlers = java.util.logging.FileHandler
java.util.logging.FileHandler.level = FINEST
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
java.util.logging.SimpleFormatter.format = %1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL %5$s%n
java.util.logging.FileHandler.encoding = UTF-8
java.util.logging.FileHandler.pattern = /var/log/app/debugtrace.log
java.util.logging.FileHandler.append = false
org.debugtrace.DebugTrace.level = FINEST
----
*`-Djava.util.logging.config.file=<path>/logging.properties` is required as Java startup option*

===== 5.2. Example of *log4j.xml* (*Log4j*)

[source,xml]
.log4j.xml
----
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">
  <appender name="traceAppender" class="org.apache.log4j.FileAppender">
    <param name="File" value="/var/log/app/debugtrace.log"/>
    <param name="Append" value="false" />
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p %t %m%n"/>
    </layout>
  </appender>

  <logger name="org.debugtrace.DebugTrace">
    <level value ="trace"/>
    <appender-ref ref="traceAppender"/>
  </logger>
</log4j:configuration>
----

===== 5.3. Example of *log4j2.xml* (*Log4j2*)

[source,xml]
.log4j2.xml
----
<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="WARN">
  <Appenders>
    <File name="traceAppender" append="false" fileName="/var/log/app/debugtrace.log">
      <PatternLayout pattern="%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level %thread %message%n"/>
    </File>
  </Appenders>

  <Loggers>
    <Logger name="org.debugtrace.DebugTrace" level="trace" additivity="false">
        <AppenderRef ref="traceAppender"/>
    </Logger>
  </Loggers>
</Configuration>
----

===== 5.4. Example of *logback.xml* (*SLF4J* / *Logback*)

[source,xml]
.logback.xml
----
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
  <appender name="traceAppender" class="ch.qos.logback.core.FileAppender">
    <file>/var/log/app/debugtrace.log</file>
    <encoder>
      <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level %thread %message%n</pattern>
    </encoder>
  </appender>

  <logger name="org.debugtrace.DebugTrace" level="trace">
    <appender-ref ref="traceAppender"/>
  </logger>
</configuration>
----

==== 6. Example of *build.gradle* description

[source,groovy]
.build.gradle
----
repositories {
    jcenter()
}

dependencies {
    compile 'org.debugtrace:debugtrace:2.+'
}
----

==== 7. License

link:LICENSE.txt[The MIT License (MIT)]

[gray]#_(C) 2015 Masato Kokubo_#

==== 8. Links

http://masatokokubo.github.io/DebugTrace-java/javadoc/index.html[API Specification]

==== 9. Release Notes

===== DebugTrace-java 3.5.1 [.small .gray]#- September 18, 2022#

* Changed log file output with `logger=File: <log file path>` to output **from the top** of the file. +
  When outputting by **appending**, specify with `logger=File: +<log file path>`.
* Fixed a bug that throw a `NullPointerException` on the output of an object of a class
  which `<class>.getPackage()` returns `null`.

===== DebugTrace-java 3.5.0 [.small .gray]#- June 19, 2022#

* Improved the log output of `byte[]`.
* Changed default values for the following properties.

[cols="1,1,1", options="header", width="60%"]
|===
^|Property Name ^|New Default Value ^|Old Default Value
|`minimumOutputSize`   ^|16  ^|5
|`minimumOutputLength` ^|16  ^|5
|`collectionLimit`     ^|128 ^|512
|`byteArrayLimit`      ^|256 ^|8192
|`stringLimit`         ^|256 ^|8192
|===

* Enabled to specify the package with the `reflectionClasses` property. +
Example: `reflectionClasses = org.debugtrace.example.`

===== DebugTrace-java 3.4.0 [.small .gray]#- June 5, 2022#

* Added `File` logger to output directly to a file.
* The following contents have been added to the log at the start.
** `System.getProperty("java.vendor")`
** `System.getProperty("java.runtime.name")`
** `System.getProperty("java.runtime.version")`

===== DebugTrace-java 3.3.1 [.small .gray]#- February 26, 2022#

* `print` methods now returns the value or the message of the argument.

===== DebugTrace-java 3.3.0 [.small .gray]#- February 6, 2022#

* Supports exception throws in the `Supplier.get` method in `print` methods with `Supplier` (or `BooleanSupplier`, etc.) as an argument.
* `print` methods with `mapNameMap` as an argument has been deprecated. Instead, define `mapNameMap` property in `DebugTrace.properties`. 

===== DebugTrace-java 3.2.0 [.small .gray]#- November 20, 2021#

* Logging library https://github.com/google/flogger[Flogger] is no longer supported.

===== DebugTrace-java 3.1.1 [.small .gray]#- August 10, 2021#

* Improved the line break handling of data output

===== DebugTrace-java 3.1.0 [.small .gray]#- June 12, 2021#

* Added support for logging library https://github.com/google/flogger[Flogger].

===== DebugTrace-java 3.0.7 [.small .gray]#- June 2, 2021#

* Improved: Single quotes in string and double quote of character no longer escape. +
`"'Foo'"` <- `"\'Foo\'"` +
`'"'` <- `'\"'`

===== DebugTrace-java 3.0.6 [.small .gray]#May 18, 2021#

* Bug fix: A `NulPointerException` is thrown in the output of an object of the `Object` class.

===== DebugTrace-java 3.0.5 [.small .gray]#April 13, 2021#

* Migrate to Maven Central repository.

===== DebugTrace-java 3.0.4 [.small .gray]#November 1, 2020#

* Fixed a bug that converted negative `byte[]` elements to the wrong string.

===== DebugTrace-java 3.0.3 [.small .gray]#October 24, 2020#

* Changed the default output format of `duration` of the `leave` method from nanoseconds to milliseconds.

===== DebugTrace-java 3.0.2 [.small .gray]#July 6, 2020#

* Changed the output parentheses in reflection. (`{}` <- `[]`)
* Improved the line break handling of data output.
* Added `printStack` method.

===== DebugTrace-java 3.0.1 [.small .gray]#May 15, 2020#

* Improved the line break handling of data output.

===== DebugTrace-java 3.0.0 [.small .gray]#May 12, 2020#

* Improved the line break handling of data output.

* Added the following properties specified in DebugTrace.properties.
** `sizeFormat` - The format string of the size of collections and maps (default: `size:%1d`)
** `minimumOutputSize` - The minimum value to output the number of elements of array, collection and map (default: `5`)
** `lengthFormat` - The format string of the length of strings (default: `length:% 1d`)
** `minimumOutputLength` - The minimum value to output the length of string length (default: `5`)
** `maximumDataOutputWidth` - The maximum output width of data (default: `70`)

* Changed the following property names specified in DebugTrace.properties. However, you can specify the previous names for compatibility.
** `enterFormat` <- `enterString`
** `leaveFormat` <- `leaveString`
** `threadBoundaryFormat` <- `threadBoundaryString`
** `classBoundaryFormat` <- `classBoundaryString`
** `nonOutputString` <- `nonPrintString`
** `collectionLimit` <- `arrayLimit`
** `nonOutputProperties` <- `nonPrintProperties`

* Delete the following properties specified in DebugTrace.properties.
** `fieldNameValueSeparator` - integrated into `keyValueSeparator`
** `mapLimit` - integrated into `collectionLimit`
