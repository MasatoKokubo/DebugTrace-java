= DebugTrace-java

link:README_ja.asciidoc[[Japanese]]

*DebugTrace-java* is a library that outputs trace logs when debugging Java programs. It is available on Java 8 or later. +
By embedding `DebugTrace.enter()` and `DebugTrace.leave()` at the start and end of methods, you can output the execution status of the Java program under development to the log.

=== 1. Features

* Automatically outputs invoker's class name, method name, source file and line number.
* Automatically indents the log with nesting methods and objects.
* Automatically output logs when changing threads.
* Uses reflection to output the contents of classes that do not implement the `toString` method.
* You can customize the output content in `DebugTrace.properties`.
* There are no dependent libraries at run time. (Required if you use the following logging library)
* You can use the following logging library.
    ** Console (stdout and stderr)
    ** https://github.com/google/flogger[Flogger] (since 3.1.0)
    ** https://docs.oracle.com/javase/8/docs/api/java/util/logging/Logger.html[JDK Logger]
    ** http://logging.apache.org/log4j/1.2/[Log4j]
    ** https://logging.apache.org/log4j/2.x/[Log4j2]
    ** http://www.slf4j.org/[SLF4J]

=== 2. How to use

Do the following for debug target and related methods.

. Insert `DebugTrace.enter()` at the beginning of methods.
. Insert `DebugTrace.leave()` at the end of methods or just before the `return` statement.
. Insert `DebugTrace.print("foo", foo)` to output arguments, local variables and return value to the log if necessary.

The following is an example of Java source used DebugTrace-java methods and the log of when it has been executed.

[source,java]
.Example1.java
----
package example;

import java.lang.reflect.Array;
import org.debugtrace.DebugTrace;

/**
 * Example1
 */
public class Example1 {
    // main
    public static void main(String[] args) {
        DebugTrace.enter(); // for DEBUGGING

        @SuppressWarnings("unused")
        Point[] points = newArray(Point.class, 2);

        DebugTrace.leave(); // for DEBUGGING
    }

    // newArray
    public static <E> E[] newArray(Class<E> elementType, int length) {
        DebugTrace.enter(); // for DEBUGGING
        DebugTrace.print("elementType", elementType); // for DEBUGGING
        DebugTrace.print("length", length); // for DEBUGGING
        @SuppressWarnings("unchecked")
        E[] array = (E[])Array.newInstance(elementType, length);
        DebugTrace.print("1 array", array); // for DEBUGGING
        try {
            for (int index = 0; index < length; ++index)
                array[index] = elementType.getConstructor().newInstance();
        }
        catch (RuntimeException e) {throw e;}
        catch (Exception e) {throw new RuntimeException(e);}
        DebugTrace.print("2 array", array); // for DEBUGGING
        DebugTrace.leave(); // for DEBUGGING
        return array;
    }

    // Point class
    public static class Point {
        private int x;
        private int y;
        public Point() {
        }
        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }
        public int getX() {return x;}
        public int getY() {return y;}
    }
}
----

.debugtrace.log
----
2021-06-02 20:57:46.832+09:00 DebugTrace 3.0.7
2021-06-02 20:57:46.833+09:00   resource base name: DebugTrace
2021-06-02 20:57:46.833+09:00   logger: org.debugtrace.logger.Std$Out
2021-06-02 20:57:46.837+09:00 
2021-06-02 20:57:46.837+09:00 ______________________________ main ______________________________
2021-06-02 20:57:46.837+09:00 
2021-06-02 20:57:46.839+09:00 Enter example.Example1.main (Example1.java:15)
2021-06-02 20:57:46.848+09:00 | Enter example.Example1.newArray (Example1.java:25)
2021-06-02 20:57:46.859+09:00 | | elementType = (Class)class example.Example1$Point (Example1.java:26)
2021-06-02 20:57:46.859+09:00 | | length = 2 (Example1.java:27)
2021-06-02 20:57:46.859+09:00 | | 1 array = (example.Example1.Point[2])[null, null] (Example1.java:30)
2021-06-02 20:57:46.862+09:00 | | 
2021-06-02 20:57:46.862+09:00 | | 2 array = (example.Example1.Point[2])[
2021-06-02 20:57:46.862+09:00 | |   (example.Example1.Point){x: 0, y: 0},
2021-06-02 20:57:46.862+09:00 | |   (example.Example1.Point){x: 0, y: 0}
2021-06-02 20:57:46.862+09:00 | | ] (Example1.java:37)
2021-06-02 20:57:46.862+09:00 | | 
2021-06-02 20:57:46.862+09:00 | Leave example.Example1.newArray (Example1.java:38) duration: 00:00:00.014
2021-06-02 20:57:46.862+09:00 | 
2021-06-02 20:57:46.863+09:00 Leave example.Example1.main (Example1.java:20) duration: 00:00:00.024
----

=== 3. Method List

This library has the following methods. These are all static methods of org.debugtrace.DebugTrace class with no return value.

[options="header"]
.Method List
|===
|Method Name|Arguments|Description

|`enter`
|_None_
|Outputs method start to log.

|`leave`
|_None_
|Outputs method end to log.

|`print`
|`message`: a message
|Outputs the message to log.

|`print`
|`messageSupplier`: a supplier of message
|Gets a message from the supplier and output it to log.

|`print`
|`name`: the value name +
`value`: the value
|Outputs to the log in the form of +
`"Name = Value"` +
The type of value is `boolean`, `char`, `byte`, `short`, `int`, `long`, `float`, `double` or `Object`.

|`print`
|`name`: the value name +
`valueSupplier`: the supplier of the value
|Gets a value from the supplier and outputs to the log in the form of +
`<value name> = <value>` +
The valueSupplier type is `BooleanSupplier`, `IntSupplier`, `LongSupplier` or `Supplier<T>`.

|`print` +
[.small .blue]#since 2.4.0#
|`mapName`: the name of map to get constant name corresponding to number +
`name`: the value name +
`value`: the value
|Outputs to the log in the form of +
`<value name> = <value>(<constant name>)`. +
The type of value is `byte`, `short`, `int`, `long` or `Object`.

|`print` +
[.small .blue]#since 2.4.0#
|`mapName`: the name of map to get constant name corresponding to number +
`name`: the value name +
`valueSupplier`: the supplier of the value
|Gets a value from the supplier and outputs to the log in the form of +
`<value name> = <value>(<constant name>)` +
The valueSupplier type is `IntSupplier`, `LongSupplier` or `Supplier<T>`.

|`printStack` +
[.small .blue]#since 3.0.2#
|`maxCount`:  maximum number of stack trace elements to output
|Outputs a list of StackTraceElements to the log.

|===

=== 4. Properties of *DebugTrace.properties* file

DebugTrace read `DebugTrace.properties` file in the classpath on startup.  
You can specify following properties in the `DebugTrace.properties` file.  

[options="header", cols="2,8"]
.Property List
|===
|Property Name|Description

|`logger`
| Logger used by DebugTrace +
[.small]#*Examples:*# +
&#xa0;&#xa0; `logger = Std$Out` [.small .blue]#- output to stdout# +
&#xa0;&#xa0; `logger = Std$Err` [.small .blue]#- output to stderr *[Default]*# +
&#xa0;&#xa0; `logger = Jdk` [.small .blue]#- use JDK Logger# +
&#xa0;&#xa0; `logger = Log4j` [.small .blue]#- use Log4j 1# +
&#xa0;&#xa0; `logger = Log4j2` [.small .blue]#- use Log4j 2# +
&#xa0;&#xa0; `logger = SLF4J` [.small .blue]#- use SLF4J#

|`logLevel`
|Log level to use when outputting +
[.small]#*Examples when use JDK:*# +
&#xa0;&#xa0; `logLevel = default` [.small .blue]#- same as finest *[Default]*# +
&#xa0;&#xa0; `logLevel = finest` +
&#xa0;&#xa0; `logLevel = finer` +
&#xa0;&#xa0; `logLevel = fine` +
&#xa0;&#xa0; `logLevel = config` +
&#xa0;&#xa0; `logLevel = info` +
&#xa0;&#xa0; `logLevel = warning` +
&#xa0;&#xa0; `logLevel = severe` +
[.small]#*Examples when use Log4j or Lo4j2:*# +
&#xa0;&#xa0; `logLevel = default` [.small .blue]#- same as trace *[Default]*# +
&#xa0;&#xa0; `logLevel = trace` +
&#xa0;&#xa0; `logLevel = debug` +
&#xa0;&#xa0; `logLevel = info` +
&#xa0;&#xa0; `logLevel = warn` +
&#xa0;&#xa0; `logLevel = error` +
&#xa0;&#xa0; `logLevel = fatal` +
[.small]#*Examples when use SLF4J:*# +
&#xa0;&#xa0; `logLevel = default` [.small .blue]#- same as trace *[Default]*# +
&#xa0;&#xa0; `logLevel = trace` +
&#xa0;&#xa0; `logLevel = debug` +
&#xa0;&#xa0; `logLevel = info` +
&#xa0;&#xa0; `logLevel = warn` +
&#xa0;&#xa0; `logLevel = error`

|`enterFormat` +
[.small .blue]#Renamed since 3.0.0# +
 +
`enterString` +
[.small .blue]#Deprecated since 3.0.0#
|The format string of logging when entering methods +
[.small]#*Example:*# +
&#xa0;&#xa0; `enterFormat = Enter %1$s.%2$s (%3$s:%4$d)` [.small .blue]#*[Default]*# +
[.small]#*Parameters:*# +
&#xa0;&#xa0; `%1`: The class name +
&#xa0;&#xa0; `%2`: The method name +
&#xa0;&#xa0; `%3`: The file name +
&#xa0;&#xa0; `%4`: The line number

|`leaveFormat` +
[.small .blue]#Renamed since 3.0.0# +
 +
`leaveString` +
[.small .blue]#Deprecated since 3.0.0#
|The format string of logging when leaving methods +
[.small]#*Example:*# +
&#xa0;&#xa0; `leaveFormat = Leave %1$s.%2$s (%3$s:%4$d) duration: %5$tT.%5$tL` [.small .blue]#*[Default]*# +
[.small]#*Parameters:*# +
&#xa0;&#xa0; `%1`: The class name +
&#xa0;&#xa0; `%2`: The method name +
&#xa0;&#xa0; `%3`: The file name +
&#xa0;&#xa0; `%4`: The line number +
&#xa0;&#xa0; `%5`: The duration since invoking the corresponding `enter` method

|`threadBoundaryFormat` +
[.small .blue]#Renamed since 3.0.0# +
 +
`threadBoundaryString` +
[.small .blue]#Deprecated since 3.0.0#
|The format string of logging at threads boundary +
[.small]#*Example:*# +
&#xa0;&#xa0; [.small]`threadBoundaryString = \____\__\__\__\__\__\__\__\__\__\__\__\__\__ %1$s \__\__\__\__\__\__\__\__\__\__\__\__\__\____` +
&#xa0;&#xa0; [.small .blue]#*[Default]*# +
[.small]#*Parameter:*# +
&#xa0;&#xa0; `%1`: The thread name

|`classBoundaryFormat` +
[.small .blue]#Renamed since 3.0.0# +
 +
`classBoundaryString` +
[.small .blue]#Deprecated since 3.0.0#
|The format string of logging at classes boundary +
[.small]#*Example:*# +
&#xa0;&#xa0; `classBoundaryString = \\____ %1$s \____` [.small .blue]#*[Default]*# +
[.small]#*Parameter:*# +
&#xa0;&#xa0; `%1`: The class name

|`indentString`
|The indentation string for code +
[.small]#*Example:*# +
&#xa0;&#xa0; `indentString = \s\s` [.small .blue]#*[Default]*# +
&#xa0;&#xa0; [.small .blue]#`\\s` is change to a space character#

|`dataIndentString`
|The indentation string for data +
[.small]#*Example:*# +
&#xa0;&#xa0; `dataIndentString = \\s\\s` [.small .blue]#*[Default]*# +
&#xa0;&#xa0; [.small .blue]#`\\s` is change to a space character#

|`limitString`
|The string to represent that it has exceeded the limit +
[.small]#*Example:*# +
&#xa0;&#xa0; `limitString = \...` [.small .blue]#*[Default]*#

|`nonOutputString` +
[.small .blue]#Renamed since 3.0.0# +
 +
`nonPrintString` +
[.small .blue]#since 1.5.0# +
[.small .blue]#Deprecated since 3.0.0#
|The string to be output instead of not outputting value +
[.small]#*Example:*# +
&#xa0;&#xa0; `nonOutputString = \***` [.small .blue]#*[Default]*#

|`cyclicReferenceString`
|The string to represent that the cyclic reference occurs +
[.small]#*Example:*# +
`cyclicReferenceString = \\s\*\** cyclic reference \***\\s` [.small .blue]#*[Default]*# +
&#xa0;&#xa0; [.small .blue]#`\\s` is change to a space character#

|`varNameValueSeparator`
|The separator string between the variable name and value +
[.small]#*Example:*# +
&#xa0;&#xa0; `varNameValueSeparator = \\s=\\s` [.small .blue]#*[Default]*# +
&#xa0;&#xa0; [.small .blue]#`\\s` is change to a space character#

|`keyValueSeparator` +
 +
[.small]#`fieldNameValueSeparator`# +
[.small .blue]#Deleted since 3.0.0#
|The separator string between the key and value of Map object +
[.small]#*Example:*# +
&#xa0;&#xa0; `keyValueSeparator = :\\s` [.small .blue]#*[Default]*# +
&#xa0;&#xa0; [.small .blue]#`\\s` is change to a space character#

|`printSuffixFormat`
|The format string of `print` method suffix +
[.small]#*Example:*# +
&#xa0;&#xa0; `printSuffixFormat = \\s(%3$s:%4$d)` [.small .blue]#*[Default]*# +
&#xa0;&#xa0; [.small .blue]#`\\s` is change to a space character# +
[.small]#*Parameters:*# +
&#xa0;&#xa0; `%1`: The class name +
&#xa0;&#xa0; `%2`: The method name +
&#xa0;&#xa0; `%3`: The file name +
&#xa0;&#xa0; `%4`: The line number

|`sizeFormat` +
[.small .blue]#since 3.0.0#
|The format string of the size of collection and map +
[.small]#*Example:*# +
&#xa0;&#xa0; `sizeFormat = size:%1d` [.small .blue]#*[Default]*# +
[.small]#*Parameters:*# +
&#xa0;&#xa0; `%1`: The size

|`minimumOutputSize` +
[.small .blue]#since 3.0.0#
|The minimum value to output the number of elements of array, collection and map +
[.small]#*Example:*# +
&#xa0;&#xa0; `minimumOutputSize = 5` [.small .blue]#*[Default]*#

|`lengthFormat` +
[.small .blue]#since 3.0.0#
|The format string of the length of string +
[.small]#*Example:*# +
&#xa0;&#xa0; `sizeFormat = length:%1d` [.small .blue]#*[Default]*# +
[.small]#*Parameters:*# +
&#xa0;&#xa0; `%1`: The string length

|`minimumOutputLength` +
[.small .blue]#since 3.0.0#
|The minimum value to output the length of string +
[.small]#*Example:*# +
&#xa0;&#xa0; `minimumOutputSize = 5` [.small .blue]#*[Default]*#

|`utilDateFormat`
|The format string of `java.util.Date` +
[.small]#*Example:*# +
&#xa0;&#xa0; `utilDateFormat = yyyy-MM-dd HH:mm:ss.SSSxxx` [.small .blue]#*[Default]*#

|`sqlDateFormat`
|The format string of `java.sql.Date` +
[.small]#*Example:*# +
&#xa0;&#xa0; `sqlDateFormat = yyyy-MM-ddxxx` [.small .blue]#*[Default]*#

|`timeFormat`
|The format string of `java.sql.Time` +
[.small]#*Example:*# +
&#xa0;&#xa0; `timeFormat = HH:mm:ss.SSSxxx` [.small .blue]#*[Default]*#

|`timestampFormat`
|The format string of `java.sql.Timestamp` +
[.small]#*Example:*# +
&#xa0;&#xa0; `timestampFormat = yyyy-MM-dd HH:mm:ss.SSSSSSSSSxxx` [.small .blue]#*[Default]*#

|`localDateFormat` +
[.small .blue]#since 2.5.0#
|The format string of `java.time.LocalDate` +
[.small]#*Example:*# +
&#xa0;&#xa0; `localDateFormat = yyyy-MM-dd` [.small .blue]#*[Default]*#

|`localTimeFormat` +
[.small .blue]#since 2.5.0#
|The format string of `java.time.LocalTime` +
[.small]#*Example:*# +
&#xa0;&#xa0; `localTimeFormat = HH:mm:ss.SSSSSSSSS` [.small .blue]#*[Default]*#

|`offsetTimeFormat` +
[.small .blue]#since 2.5.0#
|The format string of `java.time.OffsetTime` +
[.small]#*Example:*# +
&#xa0;&#xa0; `offsetTimeFormat = HH:mm:ss.SSSSSSSSSxxx` [.small .blue]#*[Default]*#

|`localDateTimeFormat` +
[.small .blue]#since 2.5.0#
|The format string of `java.time.LocalDateTime` +
[.small]#*Example:*# +
&#xa0;&#xa0; `localDateTimeFormat = yyyy-MM-dd HH:mm:ss.SSSSSSSSS` [.small .blue]#*[Default]*#

|`offsetDateTimeFormat` +
[.small .blue]#since 2.5.0#
|The format string of `java.time.OffsetDateTime` +
[.small]#*Example:*# +
&#xa0;&#xa0; `offsetDateTimeFormat = yyyy-MM-dd HH:mm:ss.SSSSSSSSSxxx` [.small .blue]#*[Default]*#

|`zonedDateTimeFormat` +
[.small .blue]#since 2.5.0#
|The format string of `java.time.ZonedDateTime` +
[.small]#*Example:*# +
&#xa0;&#xa0; `zonedDateTimeFormat = yyyy-MM-dd HH:mm:ss.SSSSSSSSSxxx VV` [.small .blue]#*[Default]*#

|`instantFormat` +
[.small .blue]#since 2.5.0#
|The format string of `java.time.Instant` +
[.small]#*Example:*# +
&#xa0;&#xa0; `instantFormat = yyyy-MM-dd HH:mm:ss.SSSSSSSSSX` [.small .blue]#*[Default]*#

|`logDateTimeFormat` +
[.small .blue]#since 2.5.0#
|The format string of the date and time of the log when the logger is `Std$Out` or `Std$Err` +
[.small]#*Example:*# +
&#xa0;&#xa0; `logDateTimeFormat = yyyy-MM-dd HH:mm:ss.SSSxxx` [.small .blue]#*[Default]*#

|`maximumDataOutputWidth` +
[.small .blue]#since 3.0.0#
|The maximum output width of data +
[.small]#*Example:*# +
`maximumDataOutputWidth = 70` [.small .blue]#*[Default]*#

|`collectionLimit` +
[.small .blue]#Renamed since 3.0.0# +
 +
[.small]#`arrayLimit`# +
[.small .blue]#Deprecated since 3.0.0# +
[.small]#`mapLimit`# +
[.small .blue]#Removed since 3.0.0#
|The limit value of elements for collection and map to output +
[.small]#*Example:*# +
`collectionLimit = 512` [.small .blue]#*[Default]*#

|`byteArrayLimit`
|The limit value of elements for byte array (`byte[]`) to output +
[.small]#*Example:*# +
&#xa0;&#xa0; `byteArrayLimit = 8192` [.small .blue]#*[Default]*#

|`stringLimit`
|The limit value of characters for string to output +
[.small]#*Example:*# +
&#xa0;&#xa0; `stringLimit = 8192` [.small .blue]#*[Default]*#

|`reflectionNestLimit` +
[.small .blue]#since 3.0.0#
|The The limit value for reflection nesting +
[.small]#*Example:*# +
`reflectionNestLimit = 4` [.small .blue]#*[Default]*#

|`nonOutputProperties` +
[.small .blue]#Renamed since 3.0.0# +
 +
[.small]#`nonPrintProperties`# +
[.small .blue]#Deprecated since 3.0.0# +
[.small .blue]#since 2.2.0#
|Properties not to be output +
[.small]#*Example (1 value):*# +
&#xa0;&#xa0; `nonOutputProperties = org.lightsleep.helper.EntityInfo#columnInfos` +
[.small]#*Example (multi values):*# +
&#xa0;&#xa0; `nonOutputProperties = \` +
&#xa0;&#xa0;&#xa0;&#xa0; `org.lightsleep.helper.EntityInfo#columnInfos,\` +
&#xa0;&#xa0;&#xa0;&#xa0; `org.lightsleep.helper.EntityInfo#keyColumnInfos,\` +
&#xa0;&#xa0;&#xa0;&#xa0; `org.lightsleep.helper.ColumnInfo#entityInfo` +
&#xa0;&#xa0; [.small .blue]#No default value# +
[.small]#*Format of a value:*# +
&#xa0;&#xa0; `<Full class name>#<Property name>`

|`defaultPackage` +
[.small .blue]#since 2.3.0#
|The default package of your java source +
[.small]#*Example:*# +
&#xa0;&#xa0; `defaultPackage = org.debugtrace.DebugTraceExample` +
&#xa0;&#xa0; [.small .blue]#No default value#

|`defaultPackageString` +
[.small .blue]#since 2.3.0#
|The string replacing the default package part +
[.small]#*Example:*# +
&#xa0;&#xa0; `defaultPackageString = \...` [.small .blue]#*[Default]*# +

|`reflectionClasses` +
[.small .blue]#since 2.4.0#
|Classe names that output content by reflection even if `toString` method is implemented +
[.small]#*Example (1 value):*# +
&#xa0;&#xa0; `reflectionClasses = org.debugtrce.DebugTraceExample.Point` +
[.small]#*Example (multi values):*# +
&#xa0;&#xa0; `reflectionClasses = \` +
&#xa0;&#xa0;&#xa0;&#xa0; `org.debugtrace.DebugTraceExample.Point,\` +
&#xa0;&#xa0;&#xa0;&#xa0; `org.debugtrace.DebugTraceExample.Rectangle` +
&#xa0;&#xa0; [.small .blue]#No default value#

|`mapNameMap` +
[.small .blue]#since 2.4.0#
|The map for obtaining map name corresponding to variable name +
[.small]#*Example:*# +
&#xa0;&#xa0; `mapNameMap = appleBrand: AppleBrand` +
[.small]#*Format of a value:*# +
&#xa0;&#xa0; `<Variable Name>: <Map Name>` +
&#xa0;&#xa0; [.small .blue]#No default value#

|`<Constant Map Name>` +
[.small .blue]#since 2.4.0#
|The map of numbers (as key) and constant names (as value) corresponding to the numbers +
&#xa0;&#xa0; `AppleBrand = \` +
&#xa0;&#xa0;&#xa0;&#xa0; `0: Apple.NO_BRAND,\` + 
&#xa0;&#xa0;&#xa0;&#xa0; `1: Apple.AKANE,\` + 
&#xa0;&#xa0;&#xa0;&#xa0; `2: Apple.AKIYO,\` + 
&#xa0;&#xa0;&#xa0;&#xa0; `3: Apple.AZUSA,\` + 
&#xa0;&#xa0;&#xa0;&#xa0; `4: Apple.YUKARI` + 
[.small]#*Format of a value:*# +
&#xa0;&#xa0; `<Number>: <Constant Name>` +
[.small]#*Predefined constant name maps:*# +
&#xa0;&#xa0; `Calendar`: `Calendar.ERA` etc. +
&#xa0;&#xa0; `CalendarWeek`: `Calendar.SUNDAY` etc. +
&#xa0;&#xa0; `CalendarMonth`: `Calendar.JANUARY` etc. +
&#xa0;&#xa0; `CalendarAmPm`: `Calendar.AM` etc. +
&#xa0;&#xa0; `SqlTypes`: `java.sql.Types.BIT` etc.

|===
Specify the format string of the date and time in the form of the argument of `String.format` for *DebugTrace-java 2.4.6 or earlier*, and specify it in the form of the argument `DateTimeFormatter.ofPattern` for *DebugTrace-java 2.5.0 or later*.

==== 4.1. *nonOutputProperties*, *nonOutputString*

DebugTrace use reflection to output object contents if the `toString` method is not implemented.
If there are other object references, the contents of objects are also output.
However, if there is circular reference, it will automatically detect and suspend output.
You can suppress output by specifying the `nonOutputProperties` property and
can specify multiple values of this property separated by commas.  
The value of the property specified by `nonOutputProperties` are output as the string specified by `nonOutputString` (default: `\***`).

.Example of nonOutputProperties in DebugTrace.properties
----
nonOutputProperties = \
    org.lightsleep.helper.EntityInfo#columnInfos,\
    org.lightsleep.helper.EntityInfo#keyColumnInfos,\
    org.lightsleep.helper.ColumnInfo#entityInfo
----

==== 4.2. Constant map and *mapNameMap*

The constant map is a map whose key is numeric and whose value is a constant name.
When you call the `print` method with the key (map name) of this property as an argument, the constant name is output with numerical value.

.Example of constant map in DebugTrace.properties
----
AppleBrand = \
    0: Apple.NO_BRAND,\
    1: Apple.AKANE,\
    2: Apple.AKIYO,\
    3: Apple.AZUSA,\
    4: Apple.YUKARI
----

[source,java]
.Example of Java source
----
int appleBrand = Apple.AKANE;
DebugTrace.print("AppleBrand", "appleBrand", appleBrand);
----

.Example of the log
----
2017-07-29 13:45:32.489 | appleBrand = 1(Apple.AKANE) (README_example.java:29)
----

If you specify the map name corresponding to the variable name with the `mapNameMap` property, even if you do not specify the map name, the constant name is output.

.Example of *mapNameMap* in DebugTrace.properties
----
mapNameMap = appleBrand: AppleBrand
----

[source,java]
.Example of Java source
----
int appleBrand = Apple.AKANE;
DebugTrace.print("appleBrand", appleBrand);
appleBrand = Apple.AKIYO;
DebugTrace.print(" 2 appleBrand ", appleBrand);
appleBrand = Apple.AZUSA;
DebugTrace.print(" 3 example.appleBrand ", appleBrand);
appleBrand = Apple.YUKARI;
DebugTrace.print(" 4 example. appleBrand ", appleBrand);
----

.Example of the log
----
2017-07-29 13:45:32.489 | appleBrand = 1(Apple.AKANE) (README_example.java:38)
2017-07-29 13:45:32.489 |  2 appleBrand  = 2(Apple.AKIYO) (README_example.java:40)
2017-07-29 13:45:32.489 |  3 example.appleBrand  = 3(Apple.AZUSA) (README_example.java:42)
2017-07-29 13:45:32.489 |  4 example. appleBrand  = 4(Apple.YUKARI) (README_example.java:44)
----

=== 5. Examples of using logging libraries

The logger name of DebugTrace is `org.debugtrace.DebugTrace`.   

==== 5.1. Example of *logging.properties* (*JDK* or *Flogger*)

.logging.properties
----
# logging.properties
handlers = java.util.logging.FileHandler
java.util.logging.FileHandler.level = FINEST
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
java.util.logging.SimpleFormatter.format = %1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL %5$s%n
java.util.logging.FileHandler.encoding = UTF-8
java.util.logging.FileHandler.pattern = /var/log/app/debugtrace.log
java.util.logging.FileHandler.append = false
org.debugtrace.DebugTrace.level = FINEST
----
*`-Djava.util.logging.config.file=<path>/logging.properties` is required as Java startup option*

==== 5.2. Example of *log4j.xml* (*Log4j*)

[source,xml]
.log4j.xml
----
<!-- log4j.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">
  <appender name="traceAppender" class="org.apache.log4j.FileAppender">
    <param name="File" value="/var/log/app/debugtrace.log"/>
    <param name="Append" value="false" />
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p %t %m%n"/>
    </layout>
  </appender>

  <logger name="org.debugtrace.DebugTrace">
    <level value ="trace"/>
    <appender-ref ref="traceAppender"/>
  </logger>
</log4j:configuration>
----

==== 5.3. Example of *log4j2.xml* (*Log4j2*)

[source,xml]
.log4j2.xml
----
<!-- log4j2.xml -->
<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="WARN">
  <Appenders>
    <File name="traceAppender" append="false" fileName="/var/log/app/debugtrace.log">
      <PatternLayout pattern="%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level %thread %message%n"/>
    </File>
  </Appenders>

  <Loggers>
    <Logger name="org.debugtrace.DebugTrace" level="trace" additivity="false">
        <AppenderRef ref="traceAppender"/>
    </Logger>
  </Loggers>
</Configuration>
----

==== 5.4. Example of *logback.xml* (*SLF4J* / *Logback*)

[source,xml]
.logback.xml
----
<!-- logback.xml -->
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
  <appender name="traceAppender" class="ch.qos.logback.core.FileAppender">
    <file>/var/log/app/debugtrace.log</file>
    <encoder>
      <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level %thread %message%n</pattern>
    </encoder>
  </appender>

  <logger name="org.debugtrace.DebugTrace" level="trace">
    <appender-ref ref="traceAppender"/>
  </logger>
</configuration>
----

=== 6. Example of *build.gradle* description

[source,groovy]
.build.gradle
----
repositories {
    jcenter()
}

dependencies {
    compile 'org.debugtrace:debugtrace:2.+'
}
----

=== 7. License

link:LICENSE.txt[The MIT License (MIT)]

[gray]#_(C) 2015 Masato Kokubo_#

=== 8. Links

http://masatokokubo.github.io/DebugTrace-java/javadoc/index.html[API Specification]

=== 9. Release Notes

==== DebugTrace-java 3.1.0 [.small .gray]#- June 12, 2021#

* Added support for logging library https://github.com/google/flogger[Flogger].

==== DebugTrace-java 3.0.7 [.small .gray]#- June 2, 2021#

* Improved: Single quotes in string and double quote of character no longer escape. +
`"'Foo'"` <- `"\'Foo\'"` +
`'"'` <- `'\"'` +

==== DebugTrace-java 3.0.6 [.small .gray]#May 18, 2021#

* Bug fix: A `NulPointerException` is thrown in the output of an object of the `Object` class.

==== DebugTrace-java 3.0.5 [.small .gray]#April 13, 2021#

* Migrate to Maven Central repository.

==== DebugTrace-java 3.0.4 [.small .gray]#November 1, 2020#

* Fixed a bug that converted negative `byte[]` elements to the wrong string.

==== DebugTrace-java 3.0.3 [.small .gray]#October 24, 2020#

* Changed the default output format of `duration` of the `leave` method from nanoseconds to milliseconds.

==== DebugTrace-java 3.0.2 [.small .gray]#July 6, 2020#

* Changed the output parentheses in reflection. (`{}` <- `[]`)
* Improved the line break handling of data output.
* Added `printStack` method.

==== DebugTrace-java 3.0.1 [.small .gray]#May 15, 2020#

* Improved the line break handling of data output.

==== DebugTrace-java 3.0.0 [.small .gray]#May 12, 2020#

* Improved the line break handling of data output.

* Added the following properties specified in DebugTrace.properties.
  ** `sizeFormat` - The format string of the size of collections and maps (default: `size:%1d`)
  ** `minimumOutputSize` - The minimum value to output the number of elements of array, collection and map (default: `5`)
  ** `lengthFormat` - The format string of the length of strings (default: `length:% 1d`)
  ** `minimumOutputLength` - The minimum value to output the length of string length (default: `5`)
  ** `maximumDataOutputWidth` - The maximum output width of data (default: `70`)

* Changed the following property names specified in DebugTrace.properties. However, you can specify the previous names for compatibility.
  ** `enterFormat` <- `enterString`
  ** `leaveFormat` <- `leaveString`
  ** `threadBoundaryFormat` <- `threadBoundaryString`
  ** `classBoundaryFormat` <- `classBoundaryString`
  ** `nonOutputString` <- `nonPrintString`
  ** `collectionLimit` <- `arrayLimit`
  ** `nonOutputProperties` <- `nonPrintProperties`

* Delete the following properties specified in DebugTrace.properties.
  ** `fieldNameValueSeparator` - integrated into `keyValueSeparator`
  ** `mapLimit` - integrated into `collectionLimit`
