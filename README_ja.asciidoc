= DebugTrace-java

link:README.asciidoc[[English]]

*DebugTrace-java* は、Javaプログラムのデバッグ時にトレースログを出力するライブラリで、Java 8以降で利用できます。 +
メソッドの開始と終了箇所に `DebugTrace.enter()` および `DebugTrace.leave()` を埋め込む事で、開発中のJavaプログラムの実行状況をログに出力する事ができます。

=== 1. [.small]#特徴#

* 呼び出し元のクラス名、メソッド名、ソースファイルおよび行番号を自動的に出力。
* メソッドやオブジェクトのネストで、ログを自動的にインデント。
* スレッドの切り替え時に自動的にログを出力。
* `toString` メソッドを実装していないクラスのオブジェクトでもリフレクションを使用して内容を出力。
* `DebugTrace.properties` で、出力内容のカスタマイズが可能。
* 実行時に依存するライブラリがない。(下記ロギング・ライブラリを使用する場合は必要)
* 各種ロギング・ライブラリを使用可能。
    ** コンソール (stdoutおよびstderr)
    ** https://github.com/google/flogger[Flogger] (3.1.0より)
    ** https://docs.oracle.com/javase/jp/8/docs/api/java/util/logging/Logger.html[JDKロガー]
    ** http://logging.apache.org/log4j/1.2/[Log4j]
    ** https://logging.apache.org/log4j/2.x/[Log4j2]
    ** http://www.slf4j.org/[SLF4J]

=== 2. [.small]#使用方法#

デバッグ対象および関連するメソッドに対して以下を行います。

. メソッドの先頭に `DebugTrace.enter()` を挿入する。
. メソッドの終了(または `return` 文の直前)に `DebugTrace.leave()` を挿入する。
. 必要に応じて、引数、ローカル変数、戻り値をログに出力する `DebugTrace.print(\...)` を挿入する。

以下は、DebugTrace-javaのメソッドを使用したJavaの例とそれを実行した際のログです。

[source,java]
.Example1.java
----
package example;

import java.lang.reflect.Array;
import org.debugtrace.DebugTrace;

/**
 * Example1
 */
public class Example1 {
    // main
    public static void main(String[] args) {
        DebugTrace.enter(); // ToDo: Remove after debugging

        @SuppressWarnings("unused")
        Point[] points = newArray(Point.class, 2);

        DebugTrace.leave(); // ToDo: Remove after debugging
    }

    // newArray
    public static <E> E[] newArray(Class<E> elementType, int length) {
        DebugTrace.enter(); // ToDo: Remove after debugging
        DebugTrace.print("elementType", elementType); // ToDo: Remove after debugging
        DebugTrace.print("length", length); // ToDo: Remove after debugging
        @SuppressWarnings("unchecked")
        E[] array = (E[])Array.newInstance(elementType, length);
        DebugTrace.print("1 array", array); // ToDo: Remove after debugging
        try {
            for (int index = 0; index < length; ++index)
                array[index] = elementType.getConstructor().newInstance();
        }
        catch (RuntimeException e) {throw e;}
        catch (Exception e) {throw new RuntimeException(e);}
        DebugTrace.print("2 array", array); // ToDo: Remove after debugging
        DebugTrace.leave(); // ToDo: Remove after debugging
        return array;
    }

    // Point class
    public static class Point {
        private int x;
        private int y;
        public Point() {
        }
        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }
        public int getX() {return x;}
        public int getY() {return y;}
    }
}
----

.debugtrace.log
----
2021-08-10 14:02:48.308+09:00 DebugTrace 3.1.1
2021-08-10 14:02:48.309+09:00   resource base name: DebugTrace
2021-08-10 14:02:48.309+09:00   logger: org.debugtrace.logger.Std$Out
2021-08-10 14:02:48.311+09:00 
2021-08-10 14:02:48.311+09:00 ______________________________ main ______________________________
2021-08-10 14:02:48.311+09:00 
2021-08-10 14:02:48.311+09:00 Enter example.Example1.main (Example1.java:15)
2021-08-10 14:02:48.315+09:00 | Enter example.Example1.newArray (Example1.java:25)
2021-08-10 14:02:48.329+09:00 | | elementType = (Class)class example.Example1$Point (Example1.java:26)
2021-08-10 14:02:48.329+09:00 | | length = 2 (Example1.java:27)
2021-08-10 14:02:48.329+09:00 | | 1 array = (example.Example1.Point[2])[null, null] (Example1.java:30)
2021-08-10 14:02:48.331+09:00 | | 
2021-08-10 14:02:48.331+09:00 | | 2 array = (example.Example1.Point[2])[
2021-08-10 14:02:48.331+09:00 | |   (example.Example1.Point){x: 0, y: 0},
2021-08-10 14:02:48.331+09:00 | |   (example.Example1.Point){x: 0, y: 0}
2021-08-10 14:02:48.331+09:00 | | ] (Example1.java:37)
2021-08-10 14:02:48.331+09:00 | | 
2021-08-10 14:02:48.332+09:00 | Leave example.Example1.newArray (Example1.java:38) duration: 00:00:00.016
2021-08-10 14:02:48.332+09:00 | 
2021-08-10 14:02:48.332+09:00 Leave example.Example1.main (Example1.java:20) duration: 00:00:00.019
----

=== 3. [.small]#メソッド一覧#

このライブラリには以下のメソッドがあります。すべてorg.debugtrace.DebugTraceクラスの静的メソッドで、戻り値なしです。

[options="header"]
.メソッド一覧
|===
|メソッド名|引 数|説 明
|`enter`
|なし
|メソッドの開始をログに出力する

|`leave`
|なし
|メソッドの終了をログに出力する

|`print`
|`message`: メッセージ
|メッセージをログに出力する

|`print`
|`messageSupplier`: メッセージのサプライヤー
|サプライヤーからメッセージを取得してログに出力する

|`print`
|`name`: 値の名前 +
`value`: 値
|`<値の名前> = <値>` +
の形式でログに出力する +
value のタイプは `boolean`, `char`, `byte`, `short`, `int`, `long`, `float`, `double` または `Object`

|`print`
|`name`: 値の名前 +
`valueSupplier`: 値のサプライヤー
|サプライヤーから値を取得して +
`<値の名前> = <値>` +
の形式でログに出力する +
valueSupplier のタイプは `BooleanSupplier`, `IntSupplier`, `LongSupplier` または `Supplier<T>`

|`print` +
[.small .blue]#ver. 2.4.0より#
|`mapName`: 数値に対応する定数名を得るためのマップの名前 +
`name`: 値の名前 +
`value`: 出力値
|`<値の名前> = <値>(<定数名>)` +
の形式でログに出力する +
valueのタイプは `byte`, `short`, `int`, `long` または `Object`

|`print` +
[.small .blue]#ver. 2.4.0より#
|`mapName`: 数値に対応する定数名を得るためのマップの名前 +
`name`: 値の名前 +
`valueSupplier`: 値のサプライヤー
|サプライヤーから値を取得して +
`<値の名前> = <値>(<定数名>)` +
の形式でログに出力する +
valueSupplierのタイプは `IntSupplier`, `LongSupplier` または `Supplier<T>`

|`printStack` +
[.small .blue]#ver. 3.0.2より#
|`maxCount`: 出力するスタックトレース要素の最大数
|スタックトレース要素のリストを出力する

|===

=== 4. DebugTrace.properties[.small]##ファイルのプロパティ##

DebugTrace は、クラスパスにある `DebugTrace.properties` ファイルを起動時に読み込みます。
`DebugTrace.properties` ファイルには以下のプロパティを指定できます。

[options="header", cols="2,8"]
.DebugTrace.properties
|===
|プロパティ名|説明
|`logger`
| DebugTrace が使用するロガー +
[.small]#*設定例:*# +
&#xa0;&#xa0; `logger = Std$Out` [.small .blue]#- stdout へ出力# +
&#xa0;&#xa0; `logger = Std$Err` [.small .blue]#- stderr へ出力 *[デフォルト]*# +
&#xa0;&#xa0; `logger = Jdk` [.small .blue]#- JDKロガー を使用# +
&#xa0;&#xa0; `logger = Log4j` [.small .blue]#- Log4j を使用# +
&#xa0;&#xa0; `logger = Log4j2` [.small .blue]#- Log4j2 を使用# +
&#xa0;&#xa0; `logger = SLF4J` [.small .blue]#- SLF4J を使用#

|`logLevel`
|使用するログレベル +
[.small]#*JDKを使用する際の設定例:*# +
&#xa0;&#xa0; `logLevel = default` [.small .blue]#- finestと同じ *[デフォルト]*# +
&#xa0;&#xa0; `logLevel = finest` +
&#xa0;&#xa0; `logLevel = finer` +
&#xa0;&#xa0; `logLevel = fine` +
&#xa0;&#xa0; `logLevel = config` +
&#xa0;&#xa0; `logLevel = info` +
&#xa0;&#xa0; `logLevel = warning` +
&#xa0;&#xa0; `logLevel = severe` +
[.small]#*Log4j, Lo4j2を使用する際の設定例:*# +
&#xa0;&#xa0; `logLevel = default` [.small .blue]#- trace と同じ *[デフォルト]*# +
&#xa0;&#xa0; `logLevel = trace` +
&#xa0;&#xa0; `logLevel = debug` +
&#xa0;&#xa0; `logLevel = info` +
&#xa0;&#xa0; `logLevel = warn` +
&#xa0;&#xa0; `logLevel = error` +
&#xa0;&#xa0; `logLevel = fatal` +
[.small]#*SLF4Jを使用する際の設定例:*# +
&#xa0;&#xa0; `logLevel = default` [.small .blue]#- trace と同じ *[デフォルト]*# +
&#xa0;&#xa0; `logLevel = trace` +
&#xa0;&#xa0; `logLevel = debug` +
&#xa0;&#xa0; `logLevel = info` +
&#xa0;&#xa0; `logLevel = warn` +
&#xa0;&#xa0; `logLevel = error`

|`enterFormat` +
[.small .blue]#ver. 3.0.0より名称変更# +
 +
[.small]#`enterString`# +
[.small .blue]#ver. 3.0.0より非推奨#
|メソッドに入る際に出力するログのフォーマット文字列 +
[.small]#*設定例:*# +
&#xa0;&#xa0; `enterFormat = Enter %1$s.%2$s (%3$s:%4$d)` [.small .blue]#*[デフォルト]*# +
[.small]#*パラメータ:*# +
&#xa0;&#xa0; `%1`: クラス名 +
&#xa0;&#xa0; `%2`: メソッド名 +
&#xa0;&#xa0; `%3`: ファイル名 +
&#xa0;&#xa0; `%4`: 行番号

|`leaveFormat` +
[.small .blue]#ver. 3.0.0より名称変更# +
 +
[.small]#`leaveString`# +
[.small .blue]#ver. 3.0.0より非推奨#
|メソッドから出る際のログ出力のフォーマット文字列 +
[.small]#*設定例:*# +
&#xa0;&#xa0; `leaveFormat = Leave %1$s.%2$s (%3$s:%4$d) duration: %5$tT.%5$tL`  [.small .blue]#*[デフォルト]*# +
[.small]#*パラメータ:*# +
&#xa0;&#xa0; `%1`: クラス名 +
&#xa0;&#xa0; `%2`: メソッド名 +
&#xa0;&#xa0; `%3`: ファイル名 +
&#xa0;&#xa0; `%4`: 行番号 +
&#xa0;&#xa0; `%5`: 対応する `enter` メソッドを呼び出してからの時間

|`threadBoundaryFormat` +
[.small .blue]#ver. 3.0.0より名称変更# +
 +
[.small]#`threadBoundaryString`# +
[.small .blue]#ver. 3.0.0より非推奨#
|スレッド境界のログ出力の文字列フォーマット +
[.small]#*設定例:*# +
&#xa0;&#xa0; [.small]`threadBoundaryFormat = \____\__\__\__\__\__\__\__\__\__\__\__\__\__ %1$s \__\__\__\__\__\__\__\__\__\__\__\__\__\____`# +
&#xa0;&#xa0; [.small .blue]#*[デフォルト]*# +
[.small]#*パラメータ:*# +
&#xa0;&#xa0; `%1`: スレッド名

|`classBoundaryFormat` +
[.small .blue]#ver. 3.0.0より名称変更# +
 +
[.small]#`classBoundaryString`# +
[.small .blue]#ver. 3.0.0より非推奨#
|クラス境界のログ出力の文字列フォーマット +
[.small]#*設定例:*# +
&#xa0;&#xa0; `classBoundaryFormat = \\____ %1$s \____` [.small .blue]#*[デフォルト]*# +
[.small]#*パラメータ:*# +
`%1`: クラス名

|`indentString`
|コードのインデント文字列 +
[.small]#*設定例:*# +
&#xa0;&#xa0; `indentString = &#x7c;\\s` [.small .blue]#*[デフォルト]*# +
&#xa0;&#xa0; [.small .blue]#`\\s` は空白文字に置き換えられる#

|`dataIndentString`
|データのインデント文字列 +
[.small]#*設定例:*# +
&#xa0;&#xa0; `dataIndentString = \\s\\s` +
&#xa0;&#xa0; [.small .blue]#`\\s` は空白文字に置き換えられる#

|`limitString`
|制限を超えた場合に出力する文字列 +
[.small]#*設定例:*# +
&#xa0;&#xa0; `limitString = \...` [.small .blue]#*[デフォルト]*#

|`nonOutputString` +
[.small .blue]#ver. 3.0.0より名称変更# +
 +
[.small]#`nonPrintString`# +
[.small .blue]#ver. 1.5.0より# +
[.small .blue]#ver. 3.0.0より非推奨#
|値を出力しない場合に代わりに出力する文字列 +
[.small]#*設定例:*# +
&#xa0;&#xa0; `nonOutputString = \***` [.small .blue]#*[デフォルト]*#

|`cyclicReferenceString`
|循環参照している場合に出力する文字列 +
[.small]#*設定例:*# +
&#xa0;&#xa0; `cyclicReferenceString = \\s\*\** cyclic reference \***\\s` [.small .blue]#*[デフォルト]*# +
&#xa0;&#xa0; [.small .blue]#`\\s` は空白文字に置き換えられる#

|`varNameValueSeparator`
|変数名と値のセパレータ文字列 +
[.small]#*設定例:*# +
&#xa0;&#xa0; `varNameValueSeparator = \\s=\\s` +
&#xa0;&#xa0; [.small .blue]#`\\s` は空白文字に置き換えられる#

|`keyValueSeparator` +
 +
[.small]#`fieldNameValueSeparator`# +
[.small .blue]#ver. 3.0.0より削除#
|マップのキーと値のおよびフィールド名と値のセパレータ文字列 +
[.small]#*設定例:*# +
&#xa0;&#xa0; `keyValueSeparator = :\\s` [.small .blue]#*[デフォルト]*# +
[.small .blue]#`\\s` は空白文字に置き換えられる#

|`printSuffixFormat` +
|`print` メソッドで付加される文字列のフォーマット +
[.small]#*設定例:*# +
&#xa0;&#xa0; `printSuffixFormat = \\s(%3$s:%4$d)` +
&#xa0;&#xa0; [.small .blue]#`\\s` は空白文字に置き換えられる# +
[.small]#*パラメータ:*# +
&#xa0;&#xa0; `%1`: 呼出側のクラス名 +
&#xa0;&#xa0; `%2`: 呼出側のメソッド名 +
&#xa0;&#xa0; `%3`: 呼出側のファイル名 +
&#xa0;&#xa0; `%4`: 呼出側の行番号

|`sizeFormat` +
[.small .blue]#ver. 3.0.0より# +
|コレクションおよびマップの要素数のフォーマット +
[.small]#*設定例:*# +
&#xa0;&#xa0; `sizeFormat = size:%1d` [.small .blue]#*[デフォルト]*# +
[.small]#*パラメータ:*# +
&#xa0;&#xa0; `%1`: 要素数

|`minimumOutputSize` +
[.small .blue]#ver. 3.0.0より# +
|配列、コレクションおよびマップの要素数を出力する最小値 +
[.small]#*設定例:*# +
&#xa0;&#xa0; `minimumOutputSize = 5` [.small .blue]#*[デフォルト]*#

|`lengthFormat` +
[.small .blue]#ver. 3.0.0より# +
|文字列長のフォーマット +
[.small]#*設定例:*# +
&#xa0;&#xa0; `sizeFormat = length:%1d` [.small .blue]#*[デフォルト]*# +
[.small]#*パラメータ:*# +
&#xa0;&#xa0; `%1`: 文字列長

|`minimumOutputLength` +
[.small .blue]#ver. 3.0.0より# +
|文字列長を出力する最小値 +
[.small]#*設定例:*# +
&#xa0;&#xa0; `minimumOutputSize = 5` [.small .blue]#*[デフォルト]*#

|`utilDateFormat`
|`java.util.Date` のフォーマット +
[.small]#*設定例:*# +
`utilDateFormat = yyyy-MM-dd HH:mm:ss.SSSxxx` [.small .blue]#*[デフォルト]*#

|`sqlDateFormat`
|`java.sql.Date` のフォーマット +
[.small]#*設定例:*# +
`sqlDateFormat = yyyy-MM-ddxxx` [.small .blue]#*[デフォルト]*#

|`timeFormat`
|`java.sql.Time` のフォーマット +
[.small]#*設定例:*# +
&#xa0;&#xa0; `timeFormat = HH:mm:ss.SSSxxx` [.small .blue]#*[デフォルト]*#

|`timestampFormat`
|`java.sql.Timestamp` のフォーマット +
[.small]#*設定例:*# +
&#xa0;&#xa0; `timestampFormat = yyyy-MM-dd HH:mm:ss.SSSSSSSSSxxx` [.small .blue]#*[デフォルト]*#

|`localDateFormat` +
[.small .blue]#ver. 2.5.0より#
|`java.time.LocalDate` のフォーマット +
[.small]#*設定例:*# +
&#xa0;&#xa0; `localDateFormat = yyyy-MM-dd` [.small .blue]#*[デフォルト]*#

|`localTimeFormat` +
[.small .blue]#ver. 2.5.0より#
|`java.time.LocalTime` のフォーマット +
[.small]#*設定例:*# +
&#xa0;&#xa0; `localTimeFormat = HH:mm:ss.SSSSSSSSS` [.small .blue]#*[デフォルト]*#

|`offsetTimeFormat` +
[.small .blue]#ver. 2.5.0より#
|`java.time.OffsetTime` のフォーマット +
[.small]#*設定例:*# +
&#xa0;&#xa0; `offsetTimeFormat = offsetTimeFormat = HH:mm:ss.SSSSSSSSSxxx` [.small .blue]#*[デフォルト]*#

|`localDateTimeFormat` +
[.small .blue]#ver. 2.5.0より#
|`java.time.LocalDateTime` のフォーマット +
[.small]#*設定例:*# +
&#xa0;&#xa0; `localDateTimeFormat = yyyy-MM-dd HH:mm:ss.SSSSSSSSS` [.small .blue]#*[デフォルト]*#

|`offsetDateTimeFormat` +
[.small .blue]#ver. 2.5.0より#
|`java.time.OffsetDateTime` のフォーマット +
[.small]#*設定例:*# +
&#xa0;&#xa0; `offsetDateTimeFormat = yyyy-MM-dd HH:mm:ss.SSSSSSSSSxxx` [.small .blue]#*[デフォルト]*#

|`zonedDateTimeFormat` +
[.small .blue]#ver. 2.5.0より#
|`java.time.ZonedDateTime` のフォーマット +
[.small]#*設定例:*# +
&#xa0;&#xa0; `zonedDateTimeFormat = yyyy-MM-dd HH:mm:ss.SSSSSSSSSxxx VV` [.small .blue]#*[デフォルト]*# +

|`instantFormat` +
[.small .blue]#ver. 2.5.0より#
|`java.time.Instant` のフォーマット +
[.small]#*設定例:*# +
&#xa0;&#xa0; `instantFormat = yyyy-MM-dd HH:mm:ss.SSSSSSSSSX` [.small .blue]#*[デフォルト]*#

|`logDateTimeFormat` +
[.small .blue]#ver. 2.5.0より#
|`logger` が `Std$Out` および `Std$Err` の場合のログの日時のフォーマット +
[.small]#*設定例:*# +
&#xa0;&#xa0; `logDateTimeFormat = yyyy-MM-dd HH:mm:ss.SSSxxx` [.small .blue]#*[デフォルト]*#

|`maximumDataOutputWidth` +
[.small .blue]#ver. 3.0.0より# +
|データの出力幅の最大値 +
[.small]#*設定例:*# +
`maximumDataOutputWidth = 70` [.small .blue]#*[デフォルト]*#

|`collectionLimit` +
[.small .blue]#ver. 3.0.0より名称変更# +
 +
[.small]#`arrayLimit`# +
[.small .blue]#ver. 3.0.0より非推奨# +
[.small]#`mapLimit`# +
[.small .blue]#ver. 3.0.0より削除#
|配列、コレクションおよびマップの要素の出力数の制限値 +
[.small]#*設定例:*# +
`collectionLimit = 512` [.small .blue]#*[デフォルト]*#

|`byteArrayLimit`
|バイト配列(`byte[]`)要素の出力数の制限値 +
[.small]#*設定例:*# +
&#xa0;&#xa0; `byteArrayLimit = 8192` [.small .blue]#*[デフォルト]*#

|`stringLimit`
|文字列の出力文字数の制限値 +
[.small]#*設定例:*# +
&#xa0;&#xa0; `stringLimit = 8192` [.small .blue]#*[デフォルト]*#

|`reflectionNestLimit` +
[.small .blue]#ver. 3.0.0より# +
|リフレクションのネスト数の制限値 +
[.small]#*設定例:*# +
`reflectionNestLimit = 4` [.small .blue]#*[デフォルト]*#

|`nonOutputProperties` +
[.small .blue]#ver. 3.0.0より名称変更# +
 +
[.small]#`nonPrintProperties`# +
[.small .blue]#ver. 2.2.0より# +
[.small .blue]#ver. 3.0.0より非推奨#
|出力しないプロパティ名のリスト +
[.small]#*設定例(値が1つ):*# +
&#xa0;&#xa0; `nonOutputProperties = org.lightsleep.helper.EntityInfo#columnInfos` +
[.small]#*設定例(値が複数):*# +
&#xa0;&#xa0; `nonOutputProperties = \` +
&#xa0;&#xa0;&#xa0;&#xa0; `org.lightsleep.helper.EntityInfo#columnInfos,\` +
&#xa0;&#xa0;&#xa0;&#xa0; `org.lightsleep.helper.EntityInfo#keyColumnInfos,\` +
&#xa0;&#xa0;&#xa0;&#xa0; `org.lightsleep.helper.ColumnInfo#entityInfo` +
&#xa0;&#xa0; [.small .blue]#デフォルトはなし# +
[.small]#*値のフォーマット:*# +
&#xa0;&#xa0; `<フルクラス名>#<プロパティ名>`

|`defaultPackage` +
[.small .blue]#ver. 2.3.0より#
|使用する Javaソースのデフォルトパッケージ +
[.small]#*設定例:*# +
&#xa0;&#xa0; `defaultPackage = org.debugtrace.DebugTraceExample` +
&#xa0;&#xa0; [.small .blue]#デフォルトはなし# +

|`defaultPackageString` +
[.small .blue]#ver. 2.3.0より#
|デフォルトパッケージ部を置き換える文字列 +
[.small]#*設定例:*# +
&#xa0;&#xa0; `defaultPackageString = \...` [.small .blue]#*[デフォルト]*#

|`reflectionClasses` +
[.small .blue]#ver. 2.4.0より#
|`toString` メソッドを実装していてもリフレクションで内容を出力するクラス名のリスト +
[.small]#*設定例(値が1つ):*# +
&#xa0;&#xa0; `reflectionClasses = org.debugtrce.DebugTraceExample.Point` +
[.small]#*設定例(値が複数):*# +
&#xa0;&#xa0; `reflectionClasses = \` +
&#xa0;&#xa0;&#xa0;&#xa0; `org.debugtrace.DebugTraceExample.Point,\` +
&#xa0;&#xa0;&#xa0;&#xa0; `org.debugtrace.DebugTraceExample.Rectangle` +
&#xa0;&#xa0; [.small .blue]#デフォルトはなし#

|`mapNameMap` +
[.small .blue]#ver. 2.4.0より#
|変数名に対応するマップ名を取得するためのマップ +
[.small]#*設定例:*# +
&#xa0;&#xa0; `mapNameMap = appleBrand: AppleBrand` +
[.small]#*値のフォーマット:*# +
&#xa0;&#xa0; `<変数名>: <マップ名>` +
&#xa0;&#xa0; [.small .blue]#デフォルトはなし#

|`<マップ名>` +
[.small .blue]#ver. 2.4.0より#
|数値(key)と数値に対応する定数名(value)のマップ +
[.small]#*設定例:*# +
&#xa0;&#xa0; `AppleBrand = \` +
&#xa0;&#xa0;&#xa0;&#xa0; `0: Apple.NO_BRAND,\` + 
&#xa0;&#xa0;&#xa0;&#xa0; `1: Apple.AKANE,\` + 
&#xa0;&#xa0;&#xa0;&#xa0; `2: Apple.AKIYO,\` + 
&#xa0;&#xa0;&#xa0;&#xa0; `3: Apple.AZUSA,\` + 
&#xa0;&#xa0;&#xa0;&#xa0; `4: Apple.YUKARI` + 
[.small]#*値のフォーマット:*# +
&#xa0;&#xa0; `<数値>: <定数名>` +
[.small]#*定義済み定数名マップ:*# +
&#xa0;&#xa0; `Calendar`: `Calendar.ERA` など +
&#xa0;&#xa0; `CalendarWeek`: `Calendar.SUNDAY` など +
&#xa0;&#xa0; `CalendarMonth`: `Calendar.JANUARY` など +
&#xa0;&#xa0; `CalendarAmPm`: `Calendar.AM` など +
&#xa0;&#xa0; `SqlTypes`: `java.sql.Types.BIT` など

|===
DebugTrace-java 2.4.6までは、日時のフォーマットを `String.format` の引数の形式で指定し、2.5.0以降では `DateTimeFormatter.ofPattern` の引数の形式で指定してください。

==== 4.1. *nonOutputProperties*, *nonOutputString*

DebugTrace は、 `toString` メソッドが実装されていない場合は、リフレクションを使用してオブジェクト内容を出力します。
他のオブジェクトの参照があれば、そのオブジェクトの内容も出力します。
ただし循環参照がある場合は、自動的に検出して出力を中断します。  
`nonOutputroperties` プロパティを指定して出力を抑制する事もできます。
このプロパティの値は、カンマ区切りで複数指定できます。  
`nonOutputProperties` で指定されたプロパティの値は、 `nonOutputString` で指定された文字列(デフォルト: `\***`)で出力されます。

.nonOutputPropertiesの例 (DebugTrace.properties)
----
nonOutputProperties = \
    org.lightsleep.helper.EntityInfo#columnInfos,\
    org.lightsleep.helper.EntityInfo#keyColumnInfos,\
    org.lightsleep.helper.ColumnInfo#entityInfo
----

==== 4.2. [.small]#定数マップ#, *mapNameMap*

定数マップは、キーが数値で値が定数名のマップです。このプロパティのキー(マップ名)を `print` メソッドの引数にしてコールすると数値に定数名が付加されて出力されます。

.定数マップの例 (DebugTrace.properties)
----
AppleBrand = \
    0: Apple.NO_BRAND,\
    1: Apple.AKANE,\
    2: Apple.AKIYO,\
    3: Apple.AZUSA,\
    4: Apple.YUKARI
----

[source,java]
.Javaソースの例
----
int appleBrand = Apple.AKANE;
DebugTrace.print("AppleBrand", "appleBrand", appleBrand);
----

.Log[.small]##の例##
----
2017-07-29 13:45:32.489 | appleBrand = 1(Apple.AKANE) (README_example.java:29)
----

変数名に対応するマップ名を `mapNameMap` プロパティで指定すると、マップ名を指定しない場合でも定数名が出力されます。

.mapNameMap[.small]##の例## (DebugTrace.properties)
----
mapNameMap = appleBrand: AppleBrand
----

[source,java]
.Javaソースの例
----
int appleBrand = Apple.AKANE;
DebugTrace.print("appleBrand", appleBrand);
appleBrand = Apple.AKIYO;
DebugTrace.print(" 2 appleBrand ", appleBrand);
appleBrand = Apple.AZUSA;
DebugTrace.print(" 3 example.appleBrand ", appleBrand);
appleBrand = Apple.YUKARI;
DebugTrace.print(" 4 example. appleBrand ", appleBrand);
----

.Logの例
----
2017-07-29 13:45:32.489 | appleBrand = 1(Apple.AKANE) (README_example.java:38)
2017-07-29 13:45:32.489 |  2 appleBrand  = 2(Apple.AKIYO) (README_example.java:40)
2017-07-29 13:45:32.489 |  3 example.appleBrand  = 3(Apple.AZUSA) (README_example.java:42)
2017-07-29 13:45:32.489 |  4 example. appleBrand  = 4(Apple.YUKARI) (README_example.java:44)
----

=== 5. [.small]#ロギング・ライブラリの使用例#

ロギング・ライブラリを使用する際のDebugTraceのロガー名は、 `org.debugtrace.DebugTrace` です。

==== 5-1. *logging.properties* (*JDK[.small]##標準##*, *Flogger*)[.small]#の例#

.logging.properties
----
# logging.properties
handlers = java.util.logging.FileHandler
java.util.logging.FileHandler.level = FINEST
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
java.util.logging.SimpleFormatter.format = %1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL %5$s%n
java.util.logging.FileHandler.encoding = UTF-8
java.util.logging.FileHandler.pattern = /var/log/app/debugtrace.log
java.util.logging.FileHandler.append = false
org.debugtrace.DebugTrace.level = FINEST
----
*Java起動時オプションとして `-Djava.util.logging.config.file=<パス>/logging.properties` が必要*

==== 5-2. *log4j.xml* (*Log4j*)[.small]#の例#

[source,xml]
.log4j.xml
----
<!-- log4j.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">
  <appender name="traceAppender" class="org.apache.log4j.FileAppender">
    <param name="File" value="/var/log/app/debugtrace.log"/>
    <param name="Append" value="false" />
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p %t %m%n"/>
    </layout>
  </appender>

  <logger name="org.debugtrace.DebugTrace">
    <level value ="trace"/>
    <appender-ref ref="traceAppender"/>
  </logger>
</log4j:configuration>
----

==== 5-3. *log4j2.xml* (*Log4j2*)[.small]#の例#

[source,xml]
.log4j2.xml
----
<!-- log4j2.xml -->
<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="WARN">
  <Appenders>
    <File name="traceAppender" append="false" fileName="/var/log/app/debugtrace.log">
      <PatternLayout pattern="%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level %thread %message%n"/>
    </File>
  </Appenders>

  <Loggers>
    <Logger name="org.debugtrace.DebugTrace" level="trace" additivity="false">
        <AppenderRef ref="traceAppender"/>
    </Logger>
  </Loggers>
</Configuration>
----

==== 5-4. *logback.xml* (*SLF4J*/*Logback*)[.small]#の例#

[source,xml]
.logback.xml
----
<!-- logback.xml -->
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
  <appender name="traceAppender" class="ch.qos.logback.core.FileAppender">
    <file>/var/log/app/debugtrace.log</file>
    <encoder>
      <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level %thread %message%n</pattern>
    </encoder>
  </appender>

  <logger name="org.debugtrace.DebugTrace" level="trace">
    <appender-ref ref="traceAppender"/>
  </logger>
</configuration>
----

=== 6. *build.gradle*[.small]##の記述例##

[source,groovy]
.build.gradle
----
repositories {
    jcenter()
}

dependencies {
    compile 'org.debugtrace:debugtrace:2.+'
}
----

=== 7. [.small]#ライセンス#

link:LICENSE.txt[MIT ライセンス(MIT)]

_(C) 2015 Masato Kokubo_

=== 8. [.small]#リンク#

http://masatokokubo.github.io/DebugTrace-java/javadoc/index.html[API仕様(英語)]

=== 9. [.small]#リリースノート#

==== DebugTrace-java 3.1.1 [.small .gray]#- 2021/8/10#

* データ出力の改行処理を改善

==== DebugTrace-java 3.1.0 [.small .gray]#- 2021/6/12#

* ロギングライブラリの https://github.com/google/flogger[Flogger] のサポートを追加。

==== DebugTrace-java 3.0.7 [.small .gray]#- 2021/6/2#

* 改善: 文字列中のシングルクオートおよび文字のダブルクオートはエスケープ表示をしないようにする。 +
`"'Foo'" <- "\'Foo\'"` +
`'"' <- '\"'` +

==== DebugTrace-java 3.0.6 [.small .gray]#- 2021/5/18#

* 不具合修正: `Object` クラスのオブジェクトの出力で `NulPointerException` がスローされる。 +

==== DebugTrace-java 3.0.5 [.small .gray]#- 2021/4/13#

* リポジトリをMaven Centralに移行 +

==== DebugTrace-java 3.0.4 [.small .gray]#- 2020/11/1#

* 負の``byte[]``要素を間違った文字列に変換する不具合を修正 +

==== DebugTrace-java 3.0.3 [.small .gray]#- 2020/10/24#

* ``leave``メソッドの``duration``のデフォルトの出力フォーマットをナノ秒からミリ秒に変更 +

==== DebugTrace-java 3.0.2 [.small .gray]#- 2020/7/6#

* リフレクションでの出力の括弧を変更 (`{}` ← `[]`)
* データ出力の改行処理を改善
* `printStack` メソッドを追加

==== DebugTrace-java 3.0.1 [.small .gray]#- 2020/5/15#

* データ出力の改行処理を改善

==== DebugTrace-java 3.0.0 [.small .gray]#- 2020/5/12#

* データ出力の改行処理を改善

* DebugTrace.propertiesで指定する以下のプロパティを追加
  ** `sizeFormat` - コレクションおよびマップの要素数のフォーマット (デフォルト: `size:%1d`)
  ** `minimumOutputSize` - 配列、コレクションおよびマップの要素数を出力する最小値 (デフォルト: `5`)
  ** `lengthFormat` - 文字列長のフォーマット (デフォルト: `length:%1d`)
  ** `minimumOutputLength` - 文字列長を出力する最小値 (デフォルト: `5`)
  ** `maximumDataOutputWidth` - データの出力幅の最大値 (デフォルト: `70`)

* DebugTrace.propertiesで指定する以下のプロパティ名を変更 (互換性維持のため従来の名称も指定可能)
  ** `enterFormat` <- `enterString`
  ** `leaveFormat` <- `leaveString`
  ** `threadBoundaryFormat` <- `threadBoundaryString`
  ** `classBoundaryFormat` <- `classBoundaryString`
  ** `nonOutputString` <- `nonPrintString`
  ** `collectionLimit` <- `arrayLimit`
  ** `nonOutputProperties` <- `nonPrintProperties`

* DebugTrace.propertiesで指定する以下のプロパティを削除
  ** `fieldNameValueSeparator` - `keyValueSeparator` に統合
  ** `mapLimit` - `collectionLimit` に統合
