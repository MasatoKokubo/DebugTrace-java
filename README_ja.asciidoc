= DebugTrace-java

link:README.asciidoc[[English]]

*DebugTrace-java* は、Javaプログラムのデバッグ時にトレースログを出力するライブラリです。 +
メソッドの開始と終了箇所に `DebugTrace.enter()` および `DebugTrace.leave()` を埋め込む事で、開発中のJavaプログラムの実行状況をログに出力する事ができます。

[options="header"]
|===
|DebugTrace-javaのバージョン|サポートするJavaのバージョン

|DebugTrace-java 4.x.x
|Java 17以降

|DebugTrace-java 3.x.x
|Java 8以降
|===

==== 1. [.small]#特徴#

* 呼び出し元のクラス名、メソッド名、ソースファイルおよび行番号を自動的に出力。
* メソッドやオブジェクトのネストで、ログを自動的にインデント。
* スレッドの切り替え時に自動的にログを出力。
* `toString` メソッドを実装していないクラスのオブジェクトでもリフレクションを使用して内容を出力。
* `DebugTrace.properties` で、出力内容のカスタマイズが可能。
* 実行時に依存するライブラリがない。(下記ロギング・ライブラリを使用する場合は必要)
* 各種ロギング・ライブラリを使用可能。
** コンソール (stdoutおよびstderr)
** https://docs.oracle.com/javase/jp/8/docs/api/java/util/logging/Logger.html[JDKロガー]
** http://logging.apache.org/log4j/1.2/[Log4j]
** https://logging.apache.org/log4j/2.x/[Log4j2]
** http://www.slf4j.org/[SLF4J]
** 直接ファイル出力

==== 2. [.small]#使用方法#

デバッグ対象および関連するメソッドに対して以下を挿入します。

* `DebugTrace.enter();`
* `DebugTrace.leave();`
* `DebugTrace.print("value", value);`

===== (1) メソッドが例外をスローせず、途中でリターンしない場合

----
public void foo() {
    DebugTrace.enter(); // TODO: Remove after debugging
    ...
    DebugTrace.print("value", value); // TODO: Remove after debugging
    ...
    DebugTrace.leave(); // TODO: Remove after debugging
}
----

===== (2) メソッドが例外をスローしないが、途中でリターンがある場合

----
public void foo() {
    try {DebugTrace.enter(); // TODO: Remove after debugging
    ...
    DebugTrace.print("value", value); // TODO: Remove after debugging
    ...
    if (...)
        return;
    ...
    } finally {DebugTrace.leave();} // TODO: Remove after debugging
}
----

===== (3) メソッドが例外をスローする場合

----
public void foo() throws Exception {
    try {DebugTrace.enter(); // TODO: Remove after debugging
    ...
    DebugTrace.print("value", value); // TODO: Remove after debugging
    ...
    if (...)
        throw new Exception();
    ...
    } catch (Exception e) {DebugTrace.print("e", e); throw e; // TODO: Remove after debugging
    } finally {DebugTrace.leave();} // TODO: Remove after debugging
}
----

以下は、DebugTrace-javaのメソッドを使用したJavaの例とそれを `args = [3]` で実行した際のログです。

[source,java]
.Example1.java
----
package example;

import java.util.HashMap;
import java.util.Map;

import org.debugtrace.DebugTrace;

public class Example1 {
    private static final Map<Long, Long> fibonacciMap = new HashMap<>();
    static {
        fibonacciMap.put(0L, 0L);
        fibonacciMap.put(1L, 1L);
    }

    public static void main(String[] args) {
        DebugTrace.enter(); // TODO: Remove after debugging
        try {
            if (args.length <= 0)
                throw new IllegalArgumentException("args.length = " + args.length);
            long n = Long.parseLong(args[0]);
            long fibonacci = fibonacci(n);
            System.out.println("fibonacci(" + n + ") = " + fibonacci);
        } catch (Exception e) {
            DebugTrace.print("e", e); // TODO: Remove after debugging
        }
        DebugTrace.leave(); // TODO: Remove after debugging
    }

    public static long fibonacci(long n) {
        DebugTrace.enter(); // TODO: Remove after debugging
        if (n < 0)
            throw new IllegalArgumentException("n (" + n + ") is negative.");
        long fibonacci = 0;
        if (fibonacciMap.containsKey(n)) {
            fibonacci = fibonacciMap.get(n);
            DebugTrace.print("mapped fibonacci(" + n + ")", fibonacci); // TODO: Remove after debugging
        } else {
            fibonacci = fibonacci(n - 2) + fibonacci(n - 1);
            DebugTrace.print("fibonacci(" + n + ")", fibonacci); // TODO: Remove after debugging
            if (fibonacci < 0)
                throw new RuntimeException("Overflow occurred in fibonacci(" + n + ") calculation.");
            fibonacciMap.put(n, fibonacci);
        }
        DebugTrace.leave(); // TODO: Remove after debugging
        return fibonacci;
    }
}
----

[source,log]
.debugtrace.log
----
2023-04-16 08:03:10.363+09:00 DebugTrace 4.0.0 on Amazon.com Inc. OpenJDK Runtime Environment 17.0.6+10-LTS
2023-04-16 08:03:10.363+09:00   property name: DebugTrace.properties
2023-04-16 08:03:10.363+09:00   logger: org.debugtrace.logger.Std$Err
2023-04-16 08:03:10.385+09:00 
2023-04-16 08:03:10.388+09:00 ______________________________ main ______________________________
2023-04-16 08:03:10.388+09:00 
2023-04-16 08:03:10.388+09:00 Enter example.Example1.main (Example1.java:18) <- (:0)
2023-04-16 08:03:10.389+09:00 | Enter example.Example1.fibonacci (Example1.java:32) <- (Example1.java:23)
2023-04-16 08:03:10.389+09:00 | | Enter example.Example1.fibonacci (Example1.java:32) <- (Example1.java:40)
2023-04-16 08:03:10.432+09:00 | | | mapped fibonacci(1) = (long)1 (Example1.java:38)
2023-04-16 08:03:10.434+09:00 | | Leave example.Example1.fibonacci (Example1.java:46) duration: 00:00:00.044
2023-04-16 08:03:10.434+09:00 | | 
2023-04-16 08:03:10.434+09:00 | | Enter example.Example1.fibonacci (Example1.java:32) <- (Example1.java:40)
2023-04-16 08:03:10.434+09:00 | | | Enter example.Example1.fibonacci (Example1.java:32) <- (Example1.java:40)
2023-04-16 08:03:10.434+09:00 | | | | mapped fibonacci(0) = (long)0 (Example1.java:38)
2023-04-16 08:03:10.436+09:00 | | | Leave example.Example1.fibonacci (Example1.java:46) duration: 00:00:00.000
2023-04-16 08:03:10.436+09:00 | | | 
2023-04-16 08:03:10.436+09:00 | | | Enter example.Example1.fibonacci (Example1.java:32) <- (Example1.java:40)
2023-04-16 08:03:10.436+09:00 | | | | mapped fibonacci(1) = (long)1 (Example1.java:38)
2023-04-16 08:03:10.436+09:00 | | | Leave example.Example1.fibonacci (Example1.java:46) duration: 00:00:00.000
2023-04-16 08:03:10.436+09:00 | | | fibonacci(2) = (long)1 (Example1.java:41)
2023-04-16 08:03:10.436+09:00 | | Leave example.Example1.fibonacci (Example1.java:46) duration: 00:00:00.001
2023-04-16 08:03:10.436+09:00 | | fibonacci(3) = (long)2 (Example1.java:41)
2023-04-16 08:03:10.437+09:00 | Leave example.Example1.fibonacci (Example1.java:46) duration: 00:00:00.047
fibonacci(3) = 2
2023-04-16 08:03:10.437+09:00 Leave example.Example1.main (Example1.java:28) duration: 00:00:00.048
----

==== 3. [.small]#メソッド一覧#

このライブラリには以下のメソッドがあります。すべて
http://masatokokubo.github.io/DebugTrace-java/javadoc/org/debugtrace/DebugTrace.html[org.debugtrace.DebugTrace]
クラスの静的メソッドです。

[cols="2,4,3,4", options="header"]
.メソッド一覧
|===
|メソッド名|引 数|戻り値|説 明
|`enter`
|_なし_
|_なし_
|メソッドの開始をログに出力する

|`leave`
|_なし_
|_なし_
|メソッドの終了をログに出力する

|`print`
|`message`: メッセージ
|`message` +
|メッセージをログに出力する

|`print`
|`messageSupplier`: メッセージのサプライヤー
|`messageSupplier` から取得したメッセージ
|サプライヤーからメッセージを取得してログに出力する

|`print`
|`name`: 値の名前 +
`value`: 値
|`value` +
|`<値の名前> = <値>` +
の形式でログに出力する +
`value` のタイプは以下のいずれか +
`boolean`, `char`, +
`byte`, `short`, `int`, `long`, +
`float`, `double`, `T`

|`print`
|`name`: 値の名前 +
`value`: 値 +
`logOptions`: http://masatokokubo.github.io/DebugTrace-java/javadoc/org/debugtrace/LogOptions.html[LogOptions] +
以下のフィールドを指定可能 +
`minimumOutputSize`, +
`minimumOutputLength`, +
`collectionLimit`, +
`byteArrayLimit`, +
`stringLimit`, +
`reflectionNestLimit` +
または以下を指定可能 +
`LogOptions.outputSize` +
`LogOptions.outputLength`
|`value` +
|同上 +

|`print`
|`name`: 値の名前 +
`valueSupplier`: 値のサプライヤー
|`valueSupplier` から取得した値
|`valueSupplier` から値を取得して +
`<値の名前> = <値>` +
の形式でログに出力する +
`valueSupplier` のタイプは以下のいずれか +
`BooleanSupplier`, +
`IntSupplier`, `LongSupplier` +
`Supplier<T>` +

|`print`
|`name`: 値の名前 +
`valueSupplier`: 値のサプライヤー +
`logOptions`: http://masatokokubo.github.io/DebugTrace-java/javadoc/org/debugtrace/LogOptions.html[LogOptions] +
[.small]#*_詳細は上を参照_*#
|`valueSupplier` から取得した値
|同上

|`printStack` +
|`maxCount`: 出力するスタックトレース要素の最大数
|_なし_
|スタックトレース要素のリストを出力する

|===

==== 4. DebugTrace.properties[.small]##ファイルのプロパティ##

DebugTrace は、クラスパスにある `DebugTrace.properties` ファイルを起動時に読み込みます。
`DebugTrace.properties` ファイルには以下のプロパティを指定できます。

[options="header", cols="2,3,4"]
.DebugTrace.properties
|===
|プロパティ名|説明|デフォルト値(設定例)
|`logger`
| DebugTrace が使用するロガー +
 +
[.small]#*指定可能な値*# +
`Std$Out` [.small]#-> stdout へ出力# +
`Std$Err` [.small]#-> stderr へ出力# +
`Jdk` [.small]#-> JDKロガー を使用# +
`Log4j` [.small]#-> Log4j を使用# +
`Log4j2` [.small]#-> Log4j2 を使用# +
`SLF4J` [.small]#-> SLF4J を使用# +
`File: [.small]#<ログファイルパス>`# [.small]#-> ファイルに出力# +
`File: [.small]#+<ログファイルパス>`# [.small]#-> ファイルに追加出力#
|`Std$Err`

|`enterFormat`
|メソッドに入る際に出力するログのフォーマット文字列 +
 +
[.small]#*パラメータ:*# +
`%1`: クラス名 +
`%2`: メソッド名 +
`%3`: ファイル名 +
`%4`: 行番号 +
`%6`: 呼び出し元のファイル名 +
`%7`: 呼び出し元の行番号
|`Enter %1$s.%2$s (%3$s:%4$d) <- (%6$s:%7$d)`

|`leaveFormat`
|メソッドから出る際のログ出力のフォーマット文字列 +
 +
[.small]#*パラメータ:*# +
`%1`: クラス名 +
`%2`: メソッド名 +
`%3`: ファイル名 +
`%4`: 行番号 +
`%5`: 対応する `enter` メソッドを呼び出してからの経過時間
|`Leave %1$s.%2$s (%3$s:%4$d) duration: %5$tT.%5$tL`

|`threadBoundaryFormat`
|スレッド境界のログ出力の文字列フォーマット +
 +
[.small]#*パラメータ:*# +
`%1`: スレッド名
|[.small]#`\____\__\__\__\__\__\__\__\__\__\__\__\__\__ %1$s \__\__\__\__\__\__\__\__\__\__\__\__\__\____`#

|`classBoundaryFormat`
|クラス境界のログ出力の文字列フォーマット +
 +
[.small]#*パラメータ:*# +
`%1`: クラス名
|`\\____ %1$s \____`

|`indentString`
|コードのインデント文字列
|`&#x7c;\\s` +
 +
`\\s` [.small]#は空白文字に置き換えられる#

|`dataIndentString`
|データのインデント文字列
|`\\s\\s` +
 +
`\\s` [.small]#は空白文字に置き換えられる#

|`limitString`
|制限を超えた場合に出力する文字列 +
|`\...`

|`nonOutputString`
|値を出力しない場合に代わりに出力する文字列 +
|`\***`

|`cyclicReferenceString`
|循環参照している場合に出力する文字列
|`\\s\*\** cyclic reference \***\\s` +
 +
`\\s` [.small]#は空白文字に置き換えられる#

|`varNameValueSeparator`
|変数名と値のセパレータ文字列 +
|`\\s=\\s` +
 +
`\\s` [.small]#は空白文字に置き換えられる#

|`keyValueSeparator`
|マップのキーと値のおよびフィールド名と値のセパレータ文字列 +
|`:\\s` +
 +
`\\s` [.small]#は空白文字に置き換えられる#

|`printSuffixFormat` +
|`print` メソッドで付加される文字列のフォーマット +
 +
[.small]#*パラメータ:*# +
`%1`: 呼出側のクラス名 +
`%2`: 呼出側のメソッド名 +
`%3`: 呼出側のファイル名 +
`%4`: 呼出側の行番号
|`\\s(%3$s:%4$d)` +
 +
`\\s` [.small]#は空白文字に置き換えられる#

|`sizeFormat`
|コレクションおよびマップの要素数のフォーマット +
 +
[.small]#*パラメータ:*# +
`%1`: 要素数
|`size:%1d`

|`minimumOutputSize`
|配列、コレクションおよびマップの要素数を出力する最小値 +
|`Integer.MAX_VALUE` [.small]#(出力しない)#

|`lengthFormat`
|文字列長のフォーマット +
 +
[.small]#*パラメータ:*# +
`%1`: 文字列長
|length:%1d

|`minimumOutputLength`
|文字列長を出力する最小値 +
|`Integer.MAX_VALUE` [.small]#(出力しない)#

|`utilDateFormat`
|`java.util.Date` のフォーマット
|`yyyy-MM-dd HH:mm:ss.SSSxxx`

|`sqlDateFormat`
|`java.sql.Date` のフォーマット
|`yyyy-MM-ddxxx`

|`timeFormat`
|`java.sql.Time` のフォーマット
|`HH:mm:ss.SSSxxx`

|`timestampFormat`
|`java.sql.Timestamp` のフォーマット
|`yyyy-MM-dd HH:mm:ss.SSSSSSSSSxxx`

|`localDateFormat`
|`java.time.LocalDate` のフォーマット
|`yyyy-MM-dd`

|`localTimeFormat`
|`java.time.LocalTime` のフォーマット
|`HH:mm:ss.SSSSSSSSS`

|`offsetTimeFormat`
|`java.time.OffsetTime` のフォーマット
|`HH:mm:ss.SSSSSSSSSxxx`

|`localDateTimeFormat`
|`java.time.LocalDateTime` のフォーマット
|`yyyy-MM-dd HH:mm:ss.SSSSSSSSS`

|`offsetDateTimeFormat`
|`java.time.OffsetDateTime` のフォーマット
|`yyyy-MM-dd HH:mm:ss.SSSSSSSSSxxx`

|`zonedDateTimeFormat`
|`java.time.ZonedDateTime` のフォーマット
|`yyyy-MM-dd HH:mm:ss.SSSSSSSSSxxx VV`

|`instantFormat`
|`java.time.Instant` のフォーマット
|`yyyy-MM-dd HH:mm:ss.SSSSSSSSSX`

|`logDateTimeFormat`
|`logger` が `Std$Out` および `Std$Err` の場合のログの日時のフォーマット
|`yyyy-MM-dd HH:mm:ss.SSSxxx`

|`maximumDataOutputWidth`
|データの出力幅の最大値 +
|70

|`collectionLimit`
|配列、コレクションおよびマップの要素の出力数の制限値 +
|128

|`byteArrayLimit`
|バイト配列(`byte[]`)要素の出力数の制限値
|256

|`stringLimit`
|文字列の出力文字数の制限値
|256

|`reflectionNestLimit`
|リフレクションのネスト数の制限値 +
|4

|`nonOutputProperties`
|出力しないプロパティ名のリスト +
 +
[.small]#*値のフォーマット:*# +
`<フルクラス名>#<プロパティ名>`
|なし +
 +
[.small]#*値の例 (1つ):*# +
[.small]#`org.lightsleep.helper.EntityInfo#columnInfos`# +
 +
[.small]#*値の例 (複数):*# +
[.small]#`org.lightsleep.helper.EntityInfo#columnInfos,\`# +
[.small]#`org.lightsleep.helper.EntityInfo#keyColumnInfos,\`# +
[.small]#`org.lightsleep.helper.ColumnInfo#entityInfo`# +

|`defaultPackage`
|使用する Javaソースのデフォルトパッケージ +
|なし +
 +
[.small]#*値の例:*# +
`org.debugtrace.DebugTraceExample`

|`defaultPackageString`
|デフォルトパッケージ部を置き換える文字列 +
|`\...`

|`reflectionClasses`
|`toString` メソッドを実装していてもリフレクションで内容を出力するクラス名または `パッケージ名 + '.'` のリスト
|なし +
 +
[.small]#*値の例 (1つ):*# +
`org.debugtrce.example.Point` +
 +
[.small]#*値の例 (複数):*# +
`org.debugtrace.example.Point,\` +
`org.debugtrace.example.Rectangle` +
 +
[.small]#*値の例 (パッケージ):*# +
`org.debugtrce.example.`

|`mapNameMap`
|変数名に対応するマップ名を取得するためのマップ +
 +
[.small]#*値のフォーマット:*# +
`<変数名>: <マップ名>`
|なし +
 +
[.small]#*値の例:*# +
`appleBrand: AppleBrand` +

|`<マップ名>`
|数値(key)と数値に対応する定数名(value)のマップ +
 +
[.small]#*値のフォーマット:*# +
`<数値>: <定数名>` +
|[.small]#*定義済み定数名マップ:*# +
`Calendar`: `Calendar.ERA` など +
`CalendarWeek`: `Calendar.SUNDAY` など +
`CalendarMonth`: `Calendar.JANUARY` など +
`CalendarAmPm`: `Calendar.AM` など +
`SqlTypes`: `java.sql.Types.BIT` など +
 +
[.small]#*設定例:*# +
`AppleBrand = \` +
&#xa0;&#xa0; `0: Apple.NO_BRAND,\` + 
&#xa0;&#xa0; `1: Apple.AKANE,\` + 
&#xa0;&#xa0; `2: Apple.AKIYO,\` + 
&#xa0;&#xa0; `3: Apple.AZUSA,\` + 
&#xa0;&#xa0; `4: Apple.YUKARI` + 

|===

日時のフォーマットは、`DateTimeFormatter.ofPattern` メソッドの引数の形式で指定してください。

===== 4.1. *nonOutputProperties*, *nonOutputString*

DebugTrace は、 `toString` メソッドが実装されていない場合は、リフレクションを使用してオブジェクト内容を出力します。
他のオブジェクトの参照があれば、そのオブジェクトの内容も出力します。
ただし循環参照がある場合は、自動的に検出して出力を中断します。  
`nonOutputroperties` プロパティを指定して出力を抑制する事もできます。
このプロパティの値は、カンマ区切りで複数指定できます。  
`nonOutputProperties` で指定されたプロパティの値は、 `nonOutputString` で指定された文字列(デフォルト: `\***`)で出力されます。

.nonOutputPropertiesの例 (DebugTrace.properties)
----
nonOutputProperties = \
    org.lightsleep.helper.EntityInfo#columnInfos,\
    org.lightsleep.helper.EntityInfo#keyColumnInfos,\
    org.lightsleep.helper.ColumnInfo#entityInfo
----

===== 4.2. [.small]#定数マップ#, *mapNameMap*

定数マップは、キーが数値で値が定数名のマップです。
変数名に対応するマップ名を `mapNameMap` プロパティで指定すると、数値に対応する定数名も出力されます。

.定数マップおよび mapNameMap の例 (DebugTrace.properties)
----
AppleBrand = \
    0: Apple.NO_BRAND,\
    1: Apple.AKANE,\
    2: Apple.AKIYO,\
    3: Apple.AZUSA,\
    4: Apple.YUKARI

mapNameMap = appleBrand:AppleBrand
----

[source,java]
.Javaソースの例
----
static public class Apple {
    public static final int NO_BRAND = 0;
    public static final int AKANE = 1;
    public static final int AKIYO = 2;
    public static final int AZUSA = 3;
    public static final int YUKARI = 4;
}
    ...

    int appleBrand = Apple.AKANE;
    DebugTrace.print("appleBrand", appleBrand);
    appleBrand = Apple.AKIYO;
    DebugTrace.print(" 2 appleBrand ", appleBrand);
    appleBrand = Apple.AZUSA;
    DebugTrace.print(" 3 example.appleBrand ", appleBrand);
    appleBrand = Apple.YUKARI;
    DebugTrace.print(" 4 example. appleBrand ", appleBrand);
----

.Logの例
----
2023-01-29 10:14:29.916+09:00 appleBrand = 1(Apple.AKANE) (ReadmeExample.java:18)
2023-01-29 10:14:29.916+09:00  2 appleBrand  = 2(Apple.AKIYO) (ReadmeExample.java:20)
2023-01-29 10:14:29.916+09:00  3 example.appleBrand  = 3(Apple.AZUSA) (ReadmeExample.java:22)
2023-01-29 10:14:29.916+09:00  4 example. appleBrand  = 4(Apple.YUKARI) (ReadmeExample.java:24)
----

==== 5. [.small]#ロギング・ライブラリの使用例#

ロギング・ライブラリを使用する際のDebugTraceのロガー名は、 `org.debugtrace.DebugTrace` です。

===== 5-1. *logging.properties* (*JDK[.small]##標準##*)[.small]#の例#

.logging.properties
----
# logging.properties
handlers = java.util.logging.FileHandler
java.util.logging.FileHandler.level = FINEST
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
java.util.logging.SimpleFormatter.format = %1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL %5$s%n
java.util.logging.FileHandler.encoding = UTF-8
java.util.logging.FileHandler.pattern = /var/log/app/debugtrace.log
java.util.logging.FileHandler.append = false
org.debugtrace.DebugTrace.level = FINEST
----
*Java起動時オプションとして `-Djava.util.logging.config.file=<パス>/logging.properties` が必要*

===== 5-2. *log4j.xml* (*Log4j*)[.small]#の例#

[source,xml]
.log4j.xml
----
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">
  <appender name="traceAppender" class="org.apache.log4j.FileAppender">
    <param name="File" value="/var/log/app/debugtrace.log"/>
    <param name="Append" value="false" />
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p %t %m%n"/>
    </layout>
  </appender>

  <logger name="org.debugtrace.DebugTrace">
    <level value ="trace"/>
    <appender-ref ref="traceAppender"/>
  </logger>
</log4j:configuration>
----

===== 5-3. *log4j2.xml* (*Log4j2*)[.small]#の例#

[source,xml]
.log4j2.xml
----
<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="WARN">
  <Appenders>
    <File name="traceAppender" append="false" fileName="/var/log/app/debugtrace.log">
      <PatternLayout pattern="%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level %thread %message%n"/>
    </File>
  </Appenders>

  <Loggers>
    <Logger name="org.debugtrace.DebugTrace" level="trace" additivity="false">
        <AppenderRef ref="traceAppender"/>
    </Logger>
  </Loggers>
</Configuration>
----

===== 5-4. *logback.xml* (*SLF4J*/*Logback*)[.small]#の例#

[source,xml]
.logback.xml
----
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
  <appender name="traceAppender" class="ch.qos.logback.core.FileAppender">
    <file>/var/log/app/debugtrace.log</file>
    <encoder>
      <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level %thread %message%n</pattern>
    </encoder>
  </appender>

  <logger name="org.debugtrace.DebugTrace" level="trace">
    <appender-ref ref="traceAppender"/>
  </logger>
</configuration>
----

==== 6. *build.gradle* [.small]##の記述例##

[source,groovy]
.build.gradle
----
repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.debugtrace:debugtrace:3.6.0'
}
----

==== 7. [.small]#ライセンス#

link:LICENSE.txt[MIT ライセンス(MIT)]

_(C) 2015 Masato Kokubo_

==== 8. [.small]#リンク#

http://masatokokubo.github.io/DebugTrace-java/javadoc/index.html[API仕様(英語)]

==== 9. [.small]#リリースノート#

https://github.com/MasatoKokubo/DebugTrace-java/releases[リリース]
