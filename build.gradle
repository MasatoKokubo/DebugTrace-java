// (C) 2015 Masato Kokubo
plugins {
    id 'maven-publish'
    id 'signing'
}

apply plugin: 'java-library'
apply plugin: 'groovy'

repositories {
    mavenCentral()
}

dependencies {
    compileOnly        'log4j:log4j:1.+'
    testRuntimeOnly    'log4j:log4j:1.+'

    compileOnly        'org.apache.logging.log4j:log4j-api:2.+'
    testRuntimeOnly    'org.apache.logging.log4j:log4j-core:2.+'

    compileOnly        'org.slf4j:slf4j-api:1.7.+'
    testRuntimeOnly    'ch.qos.logback:logback-classic:1.2.+'

    compileOnly        'org.apache.commons:commons-dbcp2:2.+'
    testRuntimeOnly    'org.apache.commons:commons-dbcp2:2.+'

    testCompileOnly    'org.junit.jupiter:junit-jupiter-api:5.8.+'
    testRuntimeOnly    'org.junit.vintage:junit-vintage-engine:5.8.+'
    testCompileOnly    'org.codehaus.groovy:groovy:3.0.+'
    testCompileOnly    'org.spockframework:spock-core:2.0-groovy-3.0'
}

sourceCompatibility = 8
targetCompatibility = 8
group               = 'org.debugtrace'
archivesBaseName    = 'debugtrace'
version             = '3.3.0'

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
        groovy {
            srcDir 'src/test/groovy'
        }
        resources {
            srcDir 'src/test/resources'
        }
    }
    example {
        java {
            srcDir 'src/example/java'
        }
        resources {
            srcDir 'src/example/resources'
        }
        compileClasspath += main.output
        compileClasspath += sourceSets.test.compileClasspath
        runtimeClasspath += main.output
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}

wrapper {
    gradleVersion = '7.3.3'
}

compileJava {
    options.encoding     = 'UTF-8'
    options.deprecation  = true
    options.debug        = true
    options.compilerArgs = ['-Xlint']
}

compileTestJava {
    options.encoding     = compileJava.options.encoding
    options.deprecation  = compileJava.options.deprecation
    options.debug        = compileJava.options.debug
    options.compilerArgs = compileJava.options.compilerArgs
}

task compileJava_ja(type:JavaCompile) {
    options.encoding     = compileJava.options.encoding
    options.deprecation  = compileJava.options.deprecation
    options.debug        = compileJava.options.debug
    options.compilerArgs = compileJava.options.compilerArgs

    classpath      = compileJava.classpath
    source         = files('src/main_ja/java')
    destinationDir = file('build/classes/main_ja')
}

processResources {
    duplicatesStrategy 'exclude'
}

processTestResources {
    duplicatesStrategy 'exclude'
}

jar {
    manifest {
        attributes  'Implementation-Title'    : project.name,
                    'Implementation-Version'  : version,
                    'Implementation-Vendor'   : 'Masato Kokubo',
                    'Implementation-Vendor-Id': 'jp.masatokokubo'
    }
}

javadoc {
    title               = "$project.name $version API Specification"
    options.charSet     = 'UTF-8'
    options.encoding    = 'UTF-8'
    options.locale      = 'en'
    options.windowTitle = "$project.name"
    options.addBooleanOption('author', true)
    options.addStringOption ('bottom', '<div class="copyright">&copy; 2015 Masato Kokubo</div>')
}

javadoc.doFirst {
    def cssFile = file('build/docs/javadoc/stylesheet.css')
    if (cssFile.exists())
        cssFile.delete()
}

javadoc.doLast {
    def cssFile = file('build/docs/javadoc/stylesheet.css')
    file('src/main/java/addtional.css').eachLine {
        cssFile.append("$it\n")
    }
}

task zip(type: Zip) {
    classifier = 'bin'

    into('/'      , {from "build/libs/${archivesBaseName}-${version}.jar"})
    into('/'      , {from 'LICENSE.txt', 'README.asciidoc', 'README_ja.asciidoc'})
    into('javadoc', {from 'build/docs/javadoc'})
    into('resources-example', {from 'src/test/resources'})
}

task sourcesJar(type: Jar) {
    classifier = 'sources'

    manifest {
        attributes 'Implementation-Title'    : project.name,
                   'Implementation-Version'  : version,
                   'Implementation-Vendor'   : 'Masato Kokubo',
                   'Implementation-Vendor-Id': 'jp.masatokokubo'
    }

    into('/org', {from 'src/main/java/org'})
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}


java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
            pom {
                name = 'DebugTrace-java'
                description = 'A library that outputs trace logs when debugging Java programs. It is available on Java 8 or later.'
                url = 'https://github.com/MasatoKokubo/DebugTrace-java'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'https://github.com/MasatoKokubo/DebugTrace-java/blob/master/LICENSE.txt'
                    }
                }
                developers {
                    developer {
                        id = 'MasatoKokubo'
                        name = 'Masato Kokubo'
                        email = 'masatokokubo@gmail.com'
                    }
                }
                scm {
                    connection = 'https://github.com/MasatoKokubo/DebugTrace-java.git'
                    developerConnection = 'https://github.com/MasatoKokubo/DebugTrace-java.git'
                    url = 'https://github.com/MasatoKokubo/DebugTrace-java'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'OSSRH'
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2'
            credentials {
                username = "$sonatypeUsername"
                password = "$sonatypePassword"
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
